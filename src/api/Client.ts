//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "/api";
    }

    getInformation(): Promise<User> {
        let url_ = this.baseUrl + "/user/me";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetInformation(_response);
        });
    }

    protected processGetInformation(response: Response): Promise<User> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = User.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ApiError.fromJS(resultData404);
            return throwException("User not found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<User>(null as any);
    }

    /**
     * @return No content
     */
    startArtificialBeatGenerator(body: StartArtificialBeatGeneratorParams): Promise<void> {
        let url_ = this.baseUrl + "/beat-generator";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processStartArtificialBeatGenerator(_response);
        });
    }

    protected processStartArtificialBeatGenerator(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return No content
     */
    stopArtificialBeatGenerator(): Promise<void> {
        let url_ = this.baseUrl + "/beat-generator";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processStopArtificialBeatGenerator(_response);
        });
    }

    protected processStopArtificialBeatGenerator(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Ok
     */
    getPosters(): Promise<Poster[]> {
        let url_ = this.baseUrl + "/screen/poster";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPosters(_response);
        });
    }

    protected processGetPosters(response: Response): Promise<Poster[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Poster.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Poster[]>(null as any);
    }

    /**
     * @return No content
     */
    forceUpdatePosters(): Promise<void> {
        let url_ = this.baseUrl + "/screen/poster/force-update";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processForceUpdatePosters(_response);
        });
    }

    protected processForceUpdatePosters(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Ok
     */
    getTrains(): Promise<TrainResponse[]> {
        let url_ = this.baseUrl + "/screen/poster/train-departures";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetTrains(_response);
        });
    }

    protected processGetTrains(response: Response): Promise<TrainResponse[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TrainResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TrainResponse[]>(null as any);
    }

    /**
     * @return No content
     */
    playAudio(): Promise<void> {
        let url_ = this.baseUrl + "/audio/play";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPlayAudio(_response);
        });
    }

    protected processPlayAudio(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return No content
     */
    stopAudio(): Promise<void> {
        let url_ = this.baseUrl + "/audio/stop";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processStopAudio(_response);
        });
    }

    protected processStopAudio(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return No content
     */
    skipAudio(body: Body): Promise<void> {
        let url_ = this.baseUrl + "/audio/skip";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSkipAudio(_response);
        });
    }

    protected processSkipAudio(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Ok
     */
    getAllScenes(): Promise<LightsScene[]> {
        let url_ = this.baseUrl + "/handler/lights/scenes";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllScenes(_response);
        });
    }

    protected processGetAllScenes(response: Response): Promise<LightsScene[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(LightsScene.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LightsScene[]>(null as any);
    }

    /**
     * @return Ok
     */
    createScene(body: CreateSceneParams): Promise<Anonymous> {
        let url_ = this.baseUrl + "/handler/lights/scenes";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateScene(_response);
        });
    }

    protected processCreateScene(response: Response): Promise<Anonymous> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous>(null as any);
    }

    /**
     * @return Ok
     */
    getSingleScene(id: number): Promise<LightsScene> {
        let url_ = this.baseUrl + "/handler/lights/scenes/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetSingleScene(_response);
        });
    }

    protected processGetSingleScene(response: Response): Promise<LightsScene> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LightsScene.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LightsScene>(null as any);
    }

    /**
     * @return No content
     */
    deleteScene(id: number): Promise<void> {
        let url_ = this.baseUrl + "/handler/lights/scenes/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteScene(_response);
        });
    }

    protected processDeleteScene(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return No content
     */
    applyScene(id: number): Promise<void> {
        let url_ = this.baseUrl + "/handler/lights/scenes/{id}/apply";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processApplyScene(_response);
        });
    }

    protected processApplyScene(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Ok
     */
    applyLightsEffect(id: number, body: LightsEffectsCreateParams[]): Promise<Anonymous2> {
        let url_ = this.baseUrl + "/handler/lights/set-effects/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processApplyLightsEffect(_response);
        });
    }

    protected processApplyLightsEffect(response: Response): Promise<Anonymous2> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous2.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous2>(null as any);
    }

    getInformation2(): Promise<Information> {
        let url_ = this.baseUrl + "/infoscreen/information";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetInformation2(_response);
        });
    }

    protected processGetInformation2(response: Response): Promise<Information> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Information.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Information>(null as any);
    }

    setInformation(body: InformationParams): Promise<Information> {
        let url_ = this.baseUrl + "/infoscreen/information";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSetInformation(_response);
        });
    }

    protected processSetInformation(response: Response): Promise<Information> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Information.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidateError.fromJS(resultData400);
            return throwException("Invalid Information", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Information>(null as any);
    }

    getAllMessages(): Promise<Message[]> {
        let url_ = this.baseUrl + "/infoscreen/messages";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllMessages(_response);
        });
    }

    protected processGetAllMessages(response: Response): Promise<Message[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Message.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Message[]>(null as any);
    }

    createMessage(body: MessageParams): Promise<Message> {
        let url_ = this.baseUrl + "/infoscreen/message";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateMessage(_response);
        });
    }

    protected processCreateMessage(response: Response): Promise<Message> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = Message.fromJS(resultData201);
            return result201;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidateError.fromJS(resultData400);
            return throwException("Invalid Message", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Message>(null as any);
    }

    updateMessage(id: string, body: Partial_MessageParams_): Promise<Message> {
        let url_ = this.baseUrl + "/infoscreen/message/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateMessage(_response);
        });
    }

    protected processUpdateMessage(response: Response): Promise<Message> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Message.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidateError.fromJS(resultData400);
            return throwException("Invalid Message", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Message>(null as any);
    }

    /**
     * @return DELETED
     */
    deleteMessage(id: string): Promise<void> {
        let url_ = this.baseUrl + "/infoscreen/message/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteMessage(_response);
        });
    }

    protected processDeleteMessage(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Start commands sent
     */
    startCenturion(): Promise<Anonymous3> {
        let url_ = this.baseUrl + "/modes/centurion/start";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processStartCenturion(_response);
        });
    }

    protected processStartCenturion(response: Response): Promise<Anonymous3> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            let result204: any = null;
            let resultData204 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result204 = resultData204 !== undefined ? resultData204 : <any>null;
    
            return result204;
            });
        } else if (status === 411) {
            return response.text().then((_responseText) => {
            let result411: any = null;
            let resultData411 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result411 = resultData411 !== undefined ? resultData411 : <any>null;
    
            return throwException("Centurion not enabled", status, _responseText, _headers, result411);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous3>(null as any);
    }

    /**
     * @return Skip commands sent
     */
    skipCenturion(body: SkipCenturionRequest): Promise<Anonymous4> {
        let url_ = this.baseUrl + "/modes/centurion/skip";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSkipCenturion(_response);
        });
    }

    protected processSkipCenturion(response: Response): Promise<Anonymous4> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            let result204: any = null;
            let resultData204 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result204 = resultData204 !== undefined ? resultData204 : <any>null;
    
            return result204;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = resultData400 !== undefined ? resultData400 : <any>null;
    
            return throwException("Invalid timestamp provided", status, _responseText, _headers, result400);
            });
        } else if (status === 411) {
            return response.text().then((_responseText) => {
            let result411: any = null;
            let resultData411 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result411 = resultData411 !== undefined ? resultData411 : <any>null;
    
            return throwException("Centurion nog enabled", status, _responseText, _headers, result411);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous4>(null as any);
    }

    /**
     * @return Start commands sent
     */
    stopCenturion(): Promise<Anonymous5> {
        let url_ = this.baseUrl + "/modes/centurion/stop";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processStopCenturion(_response);
        });
    }

    protected processStopCenturion(response: Response): Promise<Anonymous5> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            let result204: any = null;
            let resultData204 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result204 = resultData204 !== undefined ? resultData204 : <any>null;
    
            return result204;
            });
        } else if (status === 411) {
            return response.text().then((_responseText) => {
            let result411: any = null;
            let resultData411 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result411 = resultData411 !== undefined ? resultData411 : <any>null;
    
            return throwException("Centurion not enabled", status, _responseText, _headers, result411);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous5>(null as any);
    }

    enableCenturion(body: CenturionParams): Promise<string> {
        let url_ = this.baseUrl + "/modes/centurion";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processEnableCenturion(_response);
        });
    }

    protected processEnableCenturion(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            let result204: any = null;
            let resultData204 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result204 = resultData204 !== undefined ? resultData204 : <any>null;
    
            return result204;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    disableCenturion(): Promise<void> {
        let url_ = this.baseUrl + "/modes/centurion";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDisableCenturion(_response);
        });
    }

    protected processDisableCenturion(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Ok
     */
    getAudioHandlers(): Promise<HandlerResponse_Audio_[]> {
        let url_ = this.baseUrl + "/handler/audio";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAudioHandlers(_response);
        });
    }

    protected processGetAudioHandlers(response: Response): Promise<HandlerResponse_Audio_[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(HandlerResponse_Audio_.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<HandlerResponse_Audio_[]>(null as any);
    }

    /**
     * @return No content
     */
    setAudioHandler(id: number, body: Body2): Promise<void> {
        let url_ = this.baseUrl + "/handler/audio/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSetAudioHandler(_response);
        });
    }

    protected processSetAudioHandler(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Ok
     */
    getLightsHandlers(): Promise<HandlerResponse_LightsGroup_[]> {
        let url_ = this.baseUrl + "/handler/lights";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetLightsHandlers(_response);
        });
    }

    protected processGetLightsHandlers(response: Response): Promise<HandlerResponse_LightsGroup_[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(HandlerResponse_LightsGroup_.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<HandlerResponse_LightsGroup_[]>(null as any);
    }

    /**
     * @return No content
     */
    setLightsHandler(id: number, body: Body3): Promise<void> {
        let url_ = this.baseUrl + "/handler/lights/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSetLightsHandler(_response);
        });
    }

    protected processSetLightsHandler(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Ok
     */
    getScreenHandlers(): Promise<HandlerResponse_Screen_[]> {
        let url_ = this.baseUrl + "/handler/screen";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetScreenHandlers(_response);
        });
    }

    protected processGetScreenHandlers(response: Response): Promise<HandlerResponse_Screen_[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(HandlerResponse_Screen_.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<HandlerResponse_Screen_[]>(null as any);
    }

    /**
     * @return No content
     */
    setScreenHandler(id: number, body: Body4): Promise<void> {
        let url_ = this.baseUrl + "/handler/screen/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSetScreenHandler(_response);
        });
    }

    protected processSetScreenHandler(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Ok
     */
    getAudios(): Promise<AudioResponse[]> {
        let url_ = this.baseUrl + "/audio";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAudios(_response);
        });
    }

    protected processGetAudios(response: Response): Promise<AudioResponse[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(AudioResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AudioResponse[]>(null as any);
    }

    /**
     * @return Ok
     */
    createAudio(body: AudioCreateParams): Promise<AudioResponse> {
        let url_ = this.baseUrl + "/audio";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateAudio(_response);
        });
    }

    protected processCreateAudio(response: Response): Promise<AudioResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AudioResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AudioResponse>(null as any);
    }

    /**
     * @return Ok
     */
    getLightsControllers(): Promise<LightsControllerResponse[]> {
        let url_ = this.baseUrl + "/lights/controller";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetLightsControllers(_response);
        });
    }

    protected processGetLightsControllers(response: Response): Promise<LightsControllerResponse[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(LightsControllerResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LightsControllerResponse[]>(null as any);
    }

    /**
     * @return Ok
     */
    createLightsController(body: LightsControllerCreateParams): Promise<LightsControllerResponse> {
        let url_ = this.baseUrl + "/lights/controller";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateLightsController(_response);
        });
    }

    protected processCreateLightsController(response: Response): Promise<LightsControllerResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LightsControllerResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LightsControllerResponse>(null as any);
    }

    /**
     * @return Ok
     */
    getSingleLightsController(id: number): Promise<LightsController> {
        let url_ = this.baseUrl + "/lights/controller/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetSingleLightsController(_response);
        });
    }

    protected processGetSingleLightsController(response: Response): Promise<LightsController> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LightsController.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LightsController>(null as any);
    }

    /**
     * @return Ok
     */
    getLightsGroups(): Promise<BaseLightsGroupResponse[]> {
        let url_ = this.baseUrl + "/lights/group";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetLightsGroups(_response);
        });
    }

    protected processGetLightsGroups(response: Response): Promise<BaseLightsGroupResponse[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(BaseLightsGroupResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BaseLightsGroupResponse[]>(null as any);
    }

    /**
     * @return Ok
     */
    getSingleLightsGroup(id: number): Promise<LightsGroupResponse> {
        let url_ = this.baseUrl + "/lights/group/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetSingleLightsGroup(_response);
        });
    }

    protected processGetSingleLightsGroup(response: Response): Promise<LightsGroupResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LightsGroupResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LightsGroupResponse>(null as any);
    }

    /**
     * @return Ok
     */
    createLightsGroup(controllerId: number, body: LightsGroupCreateParams): Promise<LightsGroupResponse> {
        let url_ = this.baseUrl + "/lights/controller/{controllerId}/group";
        if (controllerId === undefined || controllerId === null)
            throw new Error("The parameter 'controllerId' must be defined.");
        url_ = url_.replace("{controllerId}", encodeURIComponent("" + controllerId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateLightsGroup(_response);
        });
    }

    protected processCreateLightsGroup(response: Response): Promise<LightsGroupResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LightsGroupResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LightsGroupResponse>(null as any);
    }

    /**
     * @return Ok
     */
    getAllLightsPars(): Promise<LightsPar[]> {
        let url_ = this.baseUrl + "/lights/fixture/par";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllLightsPars(_response);
        });
    }

    protected processGetAllLightsPars(response: Response): Promise<LightsPar[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(LightsPar.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LightsPar[]>(null as any);
    }

    /**
     * @return Ok
     */
    createLightsPar(body: LightsParCreateParams): Promise<LightsPar> {
        let url_ = this.baseUrl + "/lights/fixture/par";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateLightsPar(_response);
        });
    }

    protected processCreateLightsPar(response: Response): Promise<LightsPar> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LightsPar.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LightsPar>(null as any);
    }

    /**
     * @return Ok
     */
    getAllLightsMovingHeadsRgb(): Promise<LightsMovingHeadRgb[]> {
        let url_ = this.baseUrl + "/lights/fixture/moving-head/rgb";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllLightsMovingHeadsRgb(_response);
        });
    }

    protected processGetAllLightsMovingHeadsRgb(response: Response): Promise<LightsMovingHeadRgb[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(LightsMovingHeadRgb.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LightsMovingHeadRgb[]>(null as any);
    }

    /**
     * @return Ok
     */
    createLightsMovingHeadRgb(body: LightsMovingHeadRgbCreateParams): Promise<LightsMovingHeadRgb> {
        let url_ = this.baseUrl + "/lights/fixture/moving-head/rgb";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateLightsMovingHeadRgb(_response);
        });
    }

    protected processCreateLightsMovingHeadRgb(response: Response): Promise<LightsMovingHeadRgb> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LightsMovingHeadRgb.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LightsMovingHeadRgb>(null as any);
    }

    /**
     * @return Ok
     */
    getAllLightsMovingHeadsWheel(): Promise<LightsMovingHeadWheel[]> {
        let url_ = this.baseUrl + "/lights/fixture/moving-head/wheel";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllLightsMovingHeadsWheel(_response);
        });
    }

    protected processGetAllLightsMovingHeadsWheel(response: Response): Promise<LightsMovingHeadWheel[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(LightsMovingHeadWheel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LightsMovingHeadWheel[]>(null as any);
    }

    /**
     * @return Ok
     */
    createLightsMovingHeadWheel(body: LightsMovingHeadWheelCreateParams): Promise<LightsMovingHeadWheel> {
        let url_ = this.baseUrl + "/lights/fixture/moving-head/wheel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateLightsMovingHeadWheel(_response);
        });
    }

    protected processCreateLightsMovingHeadWheel(response: Response): Promise<LightsMovingHeadWheel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LightsMovingHeadWheel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LightsMovingHeadWheel>(null as any);
    }

    /**
     * @return Ok
     */
    getAllLightsEffects(): Promise<string[]> {
        let url_ = this.baseUrl + "/lights/effects";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllLightsEffects(_response);
        });
    }

    protected processGetAllLightsEffects(response: Response): Promise<string[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string[]>(null as any);
    }

    /**
     * @return Ok
     */
    getAllLightsColors(): Promise<LightsColorResponse[]> {
        let url_ = this.baseUrl + "/lights/colors";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllLightsColors(_response);
        });
    }

    protected processGetAllLightsColors(response: Response): Promise<LightsColorResponse[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(LightsColorResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LightsColorResponse[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return No content
     */
    enableStrobeOnLightsGroup(id: number, body: StrobeProps | undefined): Promise<void> {
        let url_ = this.baseUrl + "/lights/group/{id}/strobe/enable";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processEnableStrobeOnLightsGroup(_response);
        });
    }

    protected processEnableStrobeOnLightsGroup(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return No content
     */
    disableStrobeOnLightsGroup(id: number): Promise<void> {
        let url_ = this.baseUrl + "/lights/group/{id}/strobe/disable";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDisableStrobeOnLightsGroup(_response);
        });
    }

    protected processDisableStrobeOnLightsGroup(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return No content
     */
    setGroupParOverride(id: number, body: GroupFixtureOverrideParams): Promise<void> {
        let url_ = this.baseUrl + "/lights/group/par/{id}/override";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSetGroupParOverride(_response);
        });
    }

    protected processSetGroupParOverride(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return No content
     */
    resetGroupPar(id: number): Promise<void> {
        let url_ = this.baseUrl + "/lights/group/par/{id}/reset";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processResetGroupPar(_response);
        });
    }

    protected processResetGroupPar(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return No content
     */
    setGroupMovingHeadRgbOverride(id: number, body: GroupFixtureOverrideParams): Promise<void> {
        let url_ = this.baseUrl + "/lights/group/moving-head-rgb/{id}/override";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSetGroupMovingHeadRgbOverride(_response);
        });
    }

    protected processSetGroupMovingHeadRgbOverride(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return No content
     */
    resetGroupMovingHeadRgb(id: number): Promise<void> {
        let url_ = this.baseUrl + "/lights/group/moving-head-rgb/{id}/reset";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processResetGroupMovingHeadRgb(_response);
        });
    }

    protected processResetGroupMovingHeadRgb(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return No content
     */
    setGroupMovingHeadWheelOverride(id: number, body: GroupFixtureOverrideParams): Promise<void> {
        let url_ = this.baseUrl + "/lights/group/moving-head-wheel/{id}/override";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSetGroupMovingHeadWheelOverride(_response);
        });
    }

    protected processSetGroupMovingHeadWheelOverride(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return No content
     */
    resetGroupMovingHeadWheel(id: number): Promise<void> {
        let url_ = this.baseUrl + "/lights/group/moving-head-wheel/{id}/reset";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processResetGroupMovingHeadWheel(_response);
        });
    }

    protected processResetGroupMovingHeadWheel(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Ok
     */
    getScreens(): Promise<ScreenResponse[]> {
        let url_ = this.baseUrl + "/screen";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetScreens(_response);
        });
    }

    protected processGetScreens(response: Response): Promise<ScreenResponse[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ScreenResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ScreenResponse[]>(null as any);
    }

    /**
     * @return Ok
     */
    createScreen(body: ScreenCreateParams): Promise<ScreenResponse> {
        let url_ = this.baseUrl + "/screen";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateScreen(_response);
        });
    }

    protected processCreateScreen(response: Response): Promise<ScreenResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ScreenResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ScreenResponse>(null as any);
    }

    /**
     * @return No content
     */
    spotifyLogin(): Promise<void> {
        let url_ = this.baseUrl + "/spotify/login";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSpotifyLogin(_response);
        });
    }

    protected processSpotifyLogin(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param code (optional) 
     * @param error (optional) 
     * @return Ok
     */
    spotifyLoginCallback(state: string, code: string | undefined, error: string | undefined): Promise<Anonymous6> {
        let url_ = this.baseUrl + "/spotify/callback?";
        if (state === undefined || state === null)
            throw new Error("The parameter 'state' must be defined and cannot be null.");
        else
            url_ += "state=" + encodeURIComponent("" + state) + "&";
        if (code === null)
            throw new Error("The parameter 'code' cannot be null.");
        else if (code !== undefined)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        if (error === null)
            throw new Error("The parameter 'error' cannot be null.");
        else if (error !== undefined)
            url_ += "error=" + encodeURIComponent("" + error) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSpotifyLoginCallback(_response);
        });
    }

    protected processSpotifyLoginCallback(response: Response): Promise<Anonymous6> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous6>(null as any);
    }

    /**
     * @return Ok
     */
    getCurrentSpotifyUser(): Promise<SpotifyUserResponse> {
        let url_ = this.baseUrl + "/spotify/user";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentSpotifyUser(_response);
        });
    }

    protected processGetCurrentSpotifyUser(response: Response): Promise<SpotifyUserResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SpotifyUserResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 204) {
            return response.text().then((_responseText) => {
            return throwException("No user active", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SpotifyUserResponse>(null as any);
    }

    /**
     * @return Ok
     */
    getAllSpotifyUsers(): Promise<SpotifyUserResponse[]> {
        let url_ = this.baseUrl + "/spotify/users";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllSpotifyUsers(_response);
        });
    }

    protected processGetAllSpotifyUsers(response: Response): Promise<SpotifyUserResponse[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SpotifyUserResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SpotifyUserResponse[]>(null as any);
    }

    /**
     * @return No content
     */
    deleteSpotifyUser(id: number): Promise<void> {
        let url_ = this.baseUrl + "/spotify/users/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteSpotifyUser(_response);
        });
    }

    protected processDeleteSpotifyUser(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Ok
     */
    getSpotifyProfile(): Promise<UserProfile> {
        let url_ = this.baseUrl + "/spotify/profile";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetSpotifyProfile(_response);
        });
    }

    protected processGetSpotifyProfile(response: Response): Promise<UserProfile> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserProfile.fromJS(resultData200);
            return result200;
            });
        } else if (status === 204) {
            return response.text().then((_responseText) => {
            return throwException("No user active", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserProfile>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    authMock(body: User | undefined): Promise<User> {
        let url_ = this.baseUrl + "/auth/mock";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAuthMock(_response);
        });
    }

    protected processAuthMock(response: Response): Promise<User> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = User.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<User>(null as any);
    }

    /**
     * @return Success
     */
    authOIDC(body: OIDCParameters): Promise<User> {
        let url_ = this.baseUrl + "/auth/oidc";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAuthOIDC(_response);
        });
    }

    protected processAuthOIDC(response: Response): Promise<User> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = User.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<User>(null as any);
    }
}

export class User implements IUser {
    name!: string;
    roles!: string[];

    constructor(data?: IUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.roles = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(item);
            }
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        return data;
    }
}

export interface IUser {
    name: string;
    roles: string[];
}

export class ApiError implements IApiError {
    name!: string;
    message!: string;
    stack?: string;
    statusCode!: number;

    constructor(data?: IApiError) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.message = _data["message"];
            this.stack = _data["stack"];
            this.statusCode = _data["statusCode"];
        }
    }

    static fromJS(data: any): ApiError {
        data = typeof data === 'object' ? data : {};
        let result = new ApiError();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["message"] = this.message;
        data["stack"] = this.stack;
        data["statusCode"] = this.statusCode;
        return data;
    }
}

export interface IApiError {
    name: string;
    message: string;
    stack?: string;
    statusCode: number;
}

export class StartArtificialBeatGeneratorParams implements IStartArtificialBeatGeneratorParams {
    /** Beats per minute */
    bpm!: number;

    constructor(data?: IStartArtificialBeatGeneratorParams) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.bpm = _data["bpm"];
        }
    }

    static fromJS(data: any): StartArtificialBeatGeneratorParams {
        data = typeof data === 'object' ? data : {};
        let result = new StartArtificialBeatGeneratorParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bpm"] = this.bpm;
        return data;
    }
}

export interface IStartArtificialBeatGeneratorParams {
    /** Beats per minute */
    bpm: number;
}

export enum FooterSize {
    Full = "full",
    Minimal = "minimal",
    Hidden = "hidden",
}

export class BasePoster implements IBasePoster {
    name!: string;
    label!: string;
    due?: Date;
    timeout!: number;
    footer!: FooterSize;

    constructor(data?: IBasePoster) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.label = _data["label"];
            this.due = _data["due"] ? new Date(_data["due"].toString()) : <any>undefined;
            this.timeout = _data["timeout"];
            this.footer = _data["footer"];
        }
    }

    static fromJS(data: any): BasePoster {
        data = typeof data === 'object' ? data : {};
        let result = new BasePoster();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["label"] = this.label;
        data["due"] = this.due ? this.due.toISOString() : <any>undefined;
        data["timeout"] = this.timeout;
        data["footer"] = this.footer;
        return data;
    }
}

export interface IBasePoster {
    name: string;
    label: string;
    due?: Date;
    timeout: number;
    footer: FooterSize;
}

export enum AGENDA {
    Agenda = "agenda",
}

export enum INFIMA {
    Infima = "infima",
}

export enum LOGO {
    Logo = "logo",
}

export enum TRAINS {
    Train = "train",
}

export enum UNKNOWN {
    Unknown = "unknown",
}

export class LocalPosterType implements ILocalPosterType {

    [key: string]: any;

    constructor(data?: ILocalPosterType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): LocalPosterType {
        data = typeof data === 'object' ? data : {};
        let result = new LocalPosterType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface ILocalPosterType {

    [key: string]: any;
}

export class LocalPoster extends BasePoster implements ILocalPoster {
    type!: LocalPosterType;

    [key: string]: any;

    constructor(data?: ILocalPoster) {
        super(data);
        if (!data) {
            this.type = new LocalPosterType();
        }
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"] ? LocalPosterType.fromJS(_data["type"]) : new LocalPosterType();
        }
    }

    static fromJS(data: any): LocalPoster {
        data = typeof data === 'object' ? data : {};
        let result = new LocalPoster();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type ? this.type.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface ILocalPoster extends IBasePoster {
    type: LocalPosterType;

    [key: string]: any;
}

export enum IMAGE {
    Img = "img",
}

export enum VIDEO {
    Video = "video",
}

export enum EXTERNAL {
    Extern = "extern",
}

export class MediaPoster extends BasePoster implements IMediaPoster {
    source!: string[];
    type!: Type;

    [key: string]: any;

    constructor(data?: IMediaPoster) {
        super(data);
        if (!data) {
            this.source = [];
        }
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["source"])) {
                this.source = [] as any;
                for (let item of _data["source"])
                    this.source!.push(item);
            }
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): MediaPoster {
        data = typeof data === 'object' ? data : {};
        let result = new MediaPoster();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.source)) {
            data["source"] = [];
            for (let item of this.source)
                data["source"].push(item);
        }
        data["type"] = this.type;
        super.toJSON(data);
        return data;
    }
}

export interface IMediaPoster extends IBasePoster {
    source: string[];
    type: Type;

    [key: string]: any;
}

export enum PHOTO {
    Photo = "photo",
}

export class PhotoPoster extends BasePoster implements IPhotoPoster {
    albums!: number[];
    type!: PHOTO;

    [key: string]: any;

    constructor(data?: IPhotoPoster) {
        super(data);
        if (!data) {
            this.albums = [];
        }
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["albums"])) {
                this.albums = [] as any;
                for (let item of _data["albums"])
                    this.albums!.push(item);
            }
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): PhotoPoster {
        data = typeof data === 'object' ? data : {};
        let result = new PhotoPoster();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.albums)) {
            data["albums"] = [];
            for (let item of this.albums)
                data["albums"].push(item);
        }
        data["type"] = this.type;
        super.toJSON(data);
        return data;
    }
}

export interface IPhotoPoster extends IBasePoster {
    albums: number[];
    type: PHOTO;

    [key: string]: any;
}

export enum ERROR {
    Error = "error",
}

export class ErrorPoster extends BasePoster implements IErrorPoster {
    message!: string;
    type!: ERROR;

    [key: string]: any;

    constructor(data?: IErrorPoster) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): ErrorPoster {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorPoster();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        data["type"] = this.type;
        super.toJSON(data);
        return data;
    }
}

export interface IErrorPoster extends IBasePoster {
    message: string;
    type: ERROR;

    [key: string]: any;
}

export class Poster implements IPoster {

    [key: string]: any;

    constructor(data?: IPoster) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): Poster {
        data = typeof data === 'object' ? data : {};
        let result = new Poster();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface IPoster {

    [key: string]: any;
}

export class TrainResponse implements ITrainResponse {
    direction!: string;
    plannedDateTime!: string;
    delay!: number;
    trainType!: string;
    operator!: string;
    cancelled!: boolean;
    routeStations!: string[];
    messages!: Messages[];

    constructor(data?: ITrainResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.routeStations = [];
            this.messages = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.direction = _data["direction"];
            this.plannedDateTime = _data["plannedDateTime"];
            this.delay = _data["delay"];
            this.trainType = _data["trainType"];
            this.operator = _data["operator"];
            this.cancelled = _data["cancelled"];
            if (Array.isArray(_data["routeStations"])) {
                this.routeStations = [] as any;
                for (let item of _data["routeStations"])
                    this.routeStations!.push(item);
            }
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Messages.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TrainResponse {
        data = typeof data === 'object' ? data : {};
        let result = new TrainResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["direction"] = this.direction;
        data["plannedDateTime"] = this.plannedDateTime;
        data["delay"] = this.delay;
        data["trainType"] = this.trainType;
        data["operator"] = this.operator;
        data["cancelled"] = this.cancelled;
        if (Array.isArray(this.routeStations)) {
            data["routeStations"] = [];
            for (let item of this.routeStations)
                data["routeStations"].push(item);
        }
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data;
    }
}

export interface ITrainResponse {
    direction: string;
    plannedDateTime: string;
    delay: number;
    trainType: string;
    operator: string;
    cancelled: boolean;
    routeStations: string[];
    messages: Messages[];
}

export class LightsGroup implements ILightsGroup {
    id!: number;
    createdAt!: Date;
    updatedAt!: Date;
    currentHandler?: string;
    name!: string;
    /** ID of the socket connection if present.
Required to send events specifically and only to this entity */
    socketId?: string;
    controller!: LightsController;
    pars!: LightsGroupPars[];
    movingHeadWheels!: LightsGroupMovingHeadWheels[];
    movingHeadRgbs!: LightsGroupMovingHeadRgbs[];

    constructor(data?: ILightsGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.controller = new LightsController();
            this.pars = [];
            this.movingHeadWheels = [];
            this.movingHeadRgbs = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            this.currentHandler = _data["currentHandler"];
            this.name = _data["name"];
            this.socketId = _data["socketId"];
            this.controller = _data["controller"] ? LightsController.fromJS(_data["controller"]) : new LightsController();
            if (Array.isArray(_data["pars"])) {
                this.pars = [] as any;
                for (let item of _data["pars"])
                    this.pars!.push(LightsGroupPars.fromJS(item));
            }
            if (Array.isArray(_data["movingHeadWheels"])) {
                this.movingHeadWheels = [] as any;
                for (let item of _data["movingHeadWheels"])
                    this.movingHeadWheels!.push(LightsGroupMovingHeadWheels.fromJS(item));
            }
            if (Array.isArray(_data["movingHeadRgbs"])) {
                this.movingHeadRgbs = [] as any;
                for (let item of _data["movingHeadRgbs"])
                    this.movingHeadRgbs!.push(LightsGroupMovingHeadRgbs.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LightsGroup {
        data = typeof data === 'object' ? data : {};
        let result = new LightsGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        data["currentHandler"] = this.currentHandler;
        data["name"] = this.name;
        data["socketId"] = this.socketId;
        data["controller"] = this.controller ? this.controller.toJSON() : <any>undefined;
        if (Array.isArray(this.pars)) {
            data["pars"] = [];
            for (let item of this.pars)
                data["pars"].push(item.toJSON());
        }
        if (Array.isArray(this.movingHeadWheels)) {
            data["movingHeadWheels"] = [];
            for (let item of this.movingHeadWheels)
                data["movingHeadWheels"].push(item.toJSON());
        }
        if (Array.isArray(this.movingHeadRgbs)) {
            data["movingHeadRgbs"] = [];
            for (let item of this.movingHeadRgbs)
                data["movingHeadRgbs"].push(item.toJSON());
        }
        return data;
    }
}

export interface ILightsGroup {
    id: number;
    createdAt: Date;
    updatedAt: Date;
    currentHandler?: string;
    name: string;
    /** ID of the socket connection if present.
Required to send events specifically and only to this entity */
    socketId?: string;
    controller: LightsController;
    pars: LightsGroupPars[];
    movingHeadWheels: LightsGroupMovingHeadWheels[];
    movingHeadRgbs: LightsGroupMovingHeadRgbs[];
}

export class LightsController implements ILightsController {
    id!: number;
    createdAt!: Date;
    updatedAt!: Date;
    currentHandler?: string;
    name!: string;
    /** ID of the socket connection if present.
Required to send events specifically and only to this entity */
    socketId?: string;
    lightsGroups!: LightsGroup[];

    constructor(data?: ILightsController) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.lightsGroups = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            this.currentHandler = _data["currentHandler"];
            this.name = _data["name"];
            this.socketId = _data["socketId"];
            if (Array.isArray(_data["lightsGroups"])) {
                this.lightsGroups = [] as any;
                for (let item of _data["lightsGroups"])
                    this.lightsGroups!.push(LightsGroup.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LightsController {
        data = typeof data === 'object' ? data : {};
        let result = new LightsController();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        data["currentHandler"] = this.currentHandler;
        data["name"] = this.name;
        data["socketId"] = this.socketId;
        if (Array.isArray(this.lightsGroups)) {
            data["lightsGroups"] = [];
            for (let item of this.lightsGroups)
                data["lightsGroups"].push(item.toJSON());
        }
        return data;
    }
}

export interface ILightsController {
    id: number;
    createdAt: Date;
    updatedAt: Date;
    currentHandler?: string;
    name: string;
    /** ID of the socket connection if present.
Required to send events specifically and only to this entity */
    socketId?: string;
    lightsGroups: LightsGroup[];
}

export class LightsGroupPars implements ILightsGroupPars {
    id!: number;
    createdAt!: Date;
    updatedAt!: Date;
    group!: LightsGroup;
    fixture!: LightsPar;
    firstChannel!: number;

    constructor(data?: ILightsGroupPars) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.group = new LightsGroup();
            this.fixture = new LightsPar();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            this.group = _data["group"] ? LightsGroup.fromJS(_data["group"]) : new LightsGroup();
            this.fixture = _data["fixture"] ? LightsPar.fromJS(_data["fixture"]) : new LightsPar();
            this.firstChannel = _data["firstChannel"];
        }
    }

    static fromJS(data: any): LightsGroupPars {
        data = typeof data === 'object' ? data : {};
        let result = new LightsGroupPars();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        data["group"] = this.group ? this.group.toJSON() : <any>undefined;
        data["fixture"] = this.fixture ? this.fixture.toJSON() : <any>undefined;
        data["firstChannel"] = this.firstChannel;
        return data;
    }
}

export interface ILightsGroupPars {
    id: number;
    createdAt: Date;
    updatedAt: Date;
    group: LightsGroup;
    fixture: LightsPar;
    firstChannel: number;
}

export class LightsMovingHeadWheel implements ILightsMovingHeadWheel {
    id!: number;
    createdAt!: Date;
    updatedAt!: Date;
    name!: string;
    masterDimChannel!: number;
    strobeChannel!: number;
    resetChannelAndValue?: number[] | undefined;
    valuesUpdatedAt!: Date;
    movement!: Movement;
    colorWheelChannel!: number;
    goboWheelChannel!: number;
    goboRotateChannel!: number | undefined;
    colorWheelChannelValues!: LightsWheelChannelValue_ColorWheelColors_[];
    goboWheelChannelValues!: LightsWheelChannelValue_string_[];

    constructor(data?: ILightsMovingHeadWheel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.movement = new Movement();
            this.colorWheelChannelValues = [];
            this.goboWheelChannelValues = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.masterDimChannel = _data["masterDimChannel"];
            this.strobeChannel = _data["strobeChannel"];
            if (Array.isArray(_data["resetChannelAndValue"])) {
                this.resetChannelAndValue = [] as any;
                for (let item of _data["resetChannelAndValue"])
                    this.resetChannelAndValue!.push(item);
            }
            this.valuesUpdatedAt = _data["valuesUpdatedAt"] ? new Date(_data["valuesUpdatedAt"].toString()) : <any>undefined;
            this.movement = _data["movement"] ? Movement.fromJS(_data["movement"]) : new Movement();
            this.colorWheelChannel = _data["colorWheelChannel"];
            this.goboWheelChannel = _data["goboWheelChannel"];
            this.goboRotateChannel = _data["goboRotateChannel"];
            if (Array.isArray(_data["colorWheelChannelValues"])) {
                this.colorWheelChannelValues = [] as any;
                for (let item of _data["colorWheelChannelValues"])
                    this.colorWheelChannelValues!.push(LightsWheelChannelValue_ColorWheelColors_.fromJS(item));
            }
            if (Array.isArray(_data["goboWheelChannelValues"])) {
                this.goboWheelChannelValues = [] as any;
                for (let item of _data["goboWheelChannelValues"])
                    this.goboWheelChannelValues!.push(LightsWheelChannelValue_string_.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LightsMovingHeadWheel {
        data = typeof data === 'object' ? data : {};
        let result = new LightsMovingHeadWheel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        data["name"] = this.name;
        data["masterDimChannel"] = this.masterDimChannel;
        data["strobeChannel"] = this.strobeChannel;
        if (Array.isArray(this.resetChannelAndValue)) {
            data["resetChannelAndValue"] = [];
            for (let item of this.resetChannelAndValue)
                data["resetChannelAndValue"].push(item);
        }
        data["valuesUpdatedAt"] = this.valuesUpdatedAt ? this.valuesUpdatedAt.toISOString() : <any>undefined;
        data["movement"] = this.movement ? this.movement.toJSON() : <any>undefined;
        data["colorWheelChannel"] = this.colorWheelChannel;
        data["goboWheelChannel"] = this.goboWheelChannel;
        data["goboRotateChannel"] = this.goboRotateChannel;
        if (Array.isArray(this.colorWheelChannelValues)) {
            data["colorWheelChannelValues"] = [];
            for (let item of this.colorWheelChannelValues)
                data["colorWheelChannelValues"].push(item.toJSON());
        }
        if (Array.isArray(this.goboWheelChannelValues)) {
            data["goboWheelChannelValues"] = [];
            for (let item of this.goboWheelChannelValues)
                data["goboWheelChannelValues"].push(item.toJSON());
        }
        return data;
    }
}

export interface ILightsMovingHeadWheel {
    id: number;
    createdAt: Date;
    updatedAt: Date;
    name: string;
    masterDimChannel: number;
    strobeChannel: number;
    resetChannelAndValue?: number[] | undefined;
    valuesUpdatedAt: Date;
    movement: Movement;
    colorWheelChannel: number;
    goboWheelChannel: number;
    goboRotateChannel: number | undefined;
    colorWheelChannelValues: LightsWheelChannelValue_ColorWheelColors_[];
    goboWheelChannelValues: LightsWheelChannelValue_string_[];
}

export enum ColorWheelColors {
    Red = "red",
    Green = "green",
    Blue = "blue",
    Yellow = "yellow",
    LightBlue = "lightBlue",
    Orange = "orange",
    RoseRed = "roseRed",
}

export class LightsWheelChannelValue_ColorWheelColors_ implements ILightsWheelChannelValue_ColorWheelColors_ {
    id!: number;
    createdAt!: Date;
    updatedAt!: Date;
    movingHead!: LightsMovingHeadWheel;
    channel!: LightsWheelChannelValue_ColorWheelColors_Channel;
    name!: ColorWheelColors;
    value!: number;

    constructor(data?: ILightsWheelChannelValue_ColorWheelColors_) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.movingHead = new LightsMovingHeadWheel();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            this.movingHead = _data["movingHead"] ? LightsMovingHeadWheel.fromJS(_data["movingHead"]) : new LightsMovingHeadWheel();
            this.channel = _data["channel"];
            this.name = _data["name"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): LightsWheelChannelValue_ColorWheelColors_ {
        data = typeof data === 'object' ? data : {};
        let result = new LightsWheelChannelValue_ColorWheelColors_();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        data["movingHead"] = this.movingHead ? this.movingHead.toJSON() : <any>undefined;
        data["channel"] = this.channel;
        data["name"] = this.name;
        data["value"] = this.value;
        return data;
    }
}

export interface ILightsWheelChannelValue_ColorWheelColors_ {
    id: number;
    createdAt: Date;
    updatedAt: Date;
    movingHead: LightsMovingHeadWheel;
    channel: LightsWheelChannelValue_ColorWheelColors_Channel;
    name: ColorWheelColors;
    value: number;
}

export class LightsWheelChannelValue_string_ implements ILightsWheelChannelValue_string_ {
    id!: number;
    createdAt!: Date;
    updatedAt!: Date;
    movingHead!: LightsMovingHeadWheel;
    channel!: LightsWheelChannelValue_string_Channel;
    name!: string;
    value!: number;

    constructor(data?: ILightsWheelChannelValue_string_) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.movingHead = new LightsMovingHeadWheel();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            this.movingHead = _data["movingHead"] ? LightsMovingHeadWheel.fromJS(_data["movingHead"]) : new LightsMovingHeadWheel();
            this.channel = _data["channel"];
            this.name = _data["name"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): LightsWheelChannelValue_string_ {
        data = typeof data === 'object' ? data : {};
        let result = new LightsWheelChannelValue_string_();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        data["movingHead"] = this.movingHead ? this.movingHead.toJSON() : <any>undefined;
        data["channel"] = this.channel;
        data["name"] = this.name;
        data["value"] = this.value;
        return data;
    }
}

export interface ILightsWheelChannelValue_string_ {
    id: number;
    createdAt: Date;
    updatedAt: Date;
    movingHead: LightsMovingHeadWheel;
    channel: LightsWheelChannelValue_string_Channel;
    name: string;
    value: number;
}

export class Movement implements IMovement {
    panChannel!: number;
    finePanChannel?: number | undefined;
    tiltChannel!: number;
    fineTiltChannel?: number | undefined;
    movingSpeedChannel?: number | undefined;

    constructor(data?: IMovement) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.panChannel = _data["panChannel"];
            this.finePanChannel = _data["finePanChannel"];
            this.tiltChannel = _data["tiltChannel"];
            this.fineTiltChannel = _data["fineTiltChannel"];
            this.movingSpeedChannel = _data["movingSpeedChannel"];
        }
    }

    static fromJS(data: any): Movement {
        data = typeof data === 'object' ? data : {};
        let result = new Movement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["panChannel"] = this.panChannel;
        data["finePanChannel"] = this.finePanChannel;
        data["tiltChannel"] = this.tiltChannel;
        data["fineTiltChannel"] = this.fineTiltChannel;
        data["movingSpeedChannel"] = this.movingSpeedChannel;
        return data;
    }
}

export interface IMovement {
    panChannel: number;
    finePanChannel?: number | undefined;
    tiltChannel: number;
    fineTiltChannel?: number | undefined;
    movingSpeedChannel?: number | undefined;
}

export class LightsGroupMovingHeadWheels implements ILightsGroupMovingHeadWheels {
    id!: number;
    createdAt!: Date;
    updatedAt!: Date;
    group!: LightsGroup;
    fixture!: LightsMovingHeadWheel;
    firstChannel!: number;

    constructor(data?: ILightsGroupMovingHeadWheels) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.group = new LightsGroup();
            this.fixture = new LightsMovingHeadWheel();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            this.group = _data["group"] ? LightsGroup.fromJS(_data["group"]) : new LightsGroup();
            this.fixture = _data["fixture"] ? LightsMovingHeadWheel.fromJS(_data["fixture"]) : new LightsMovingHeadWheel();
            this.firstChannel = _data["firstChannel"];
        }
    }

    static fromJS(data: any): LightsGroupMovingHeadWheels {
        data = typeof data === 'object' ? data : {};
        let result = new LightsGroupMovingHeadWheels();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        data["group"] = this.group ? this.group.toJSON() : <any>undefined;
        data["fixture"] = this.fixture ? this.fixture.toJSON() : <any>undefined;
        data["firstChannel"] = this.firstChannel;
        return data;
    }
}

export interface ILightsGroupMovingHeadWheels {
    id: number;
    createdAt: Date;
    updatedAt: Date;
    group: LightsGroup;
    fixture: LightsMovingHeadWheel;
    firstChannel: number;
}

export class Colors implements IColors {
    redChannel!: number;
    greenChannel!: number;
    blueChannel!: number;
    coldWhiteChannel?: number | undefined;
    warmWhiteChannel?: number | undefined;
    amberChannel?: number | undefined;
    uvChannel?: number | undefined;

    constructor(data?: IColors) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.redChannel = _data["redChannel"];
            this.greenChannel = _data["greenChannel"];
            this.blueChannel = _data["blueChannel"];
            this.coldWhiteChannel = _data["coldWhiteChannel"];
            this.warmWhiteChannel = _data["warmWhiteChannel"];
            this.amberChannel = _data["amberChannel"];
            this.uvChannel = _data["uvChannel"];
        }
    }

    static fromJS(data: any): Colors {
        data = typeof data === 'object' ? data : {};
        let result = new Colors();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["redChannel"] = this.redChannel;
        data["greenChannel"] = this.greenChannel;
        data["blueChannel"] = this.blueChannel;
        data["coldWhiteChannel"] = this.coldWhiteChannel;
        data["warmWhiteChannel"] = this.warmWhiteChannel;
        data["amberChannel"] = this.amberChannel;
        data["uvChannel"] = this.uvChannel;
        return data;
    }
}

export interface IColors {
    redChannel: number;
    greenChannel: number;
    blueChannel: number;
    coldWhiteChannel?: number | undefined;
    warmWhiteChannel?: number | undefined;
    amberChannel?: number | undefined;
    uvChannel?: number | undefined;
}

export class LightsFixtureCurrentValues implements ILightsFixtureCurrentValues {
    masterDimChannel!: number;
    strobeChannel!: number;

    constructor(data?: ILightsFixtureCurrentValues) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.masterDimChannel = _data["masterDimChannel"];
            this.strobeChannel = _data["strobeChannel"];
        }
    }

    static fromJS(data: any): LightsFixtureCurrentValues {
        data = typeof data === 'object' ? data : {};
        let result = new LightsFixtureCurrentValues();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["masterDimChannel"] = this.masterDimChannel;
        data["strobeChannel"] = this.strobeChannel;
        return data;
    }
}

export interface ILightsFixtureCurrentValues {
    masterDimChannel: number;
    strobeChannel: number;
}

export class LightsMovingHeadRgb implements ILightsMovingHeadRgb {
    id!: number;
    createdAt!: Date;
    updatedAt!: Date;
    name!: string;
    masterDimChannel!: number;
    strobeChannel!: number;
    resetChannelAndValue?: number[] | undefined;
    valuesUpdatedAt!: Date;
    movement!: Movement;
    color!: Colors;
    currentValues?: CurrentValues;

    constructor(data?: ILightsMovingHeadRgb) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.movement = new Movement();
            this.color = new Colors();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.masterDimChannel = _data["masterDimChannel"];
            this.strobeChannel = _data["strobeChannel"];
            if (Array.isArray(_data["resetChannelAndValue"])) {
                this.resetChannelAndValue = [] as any;
                for (let item of _data["resetChannelAndValue"])
                    this.resetChannelAndValue!.push(item);
            }
            this.valuesUpdatedAt = _data["valuesUpdatedAt"] ? new Date(_data["valuesUpdatedAt"].toString()) : <any>undefined;
            this.movement = _data["movement"] ? Movement.fromJS(_data["movement"]) : new Movement();
            this.color = _data["color"] ? Colors.fromJS(_data["color"]) : new Colors();
            this.currentValues = _data["currentValues"];
        }
    }

    static fromJS(data: any): LightsMovingHeadRgb {
        data = typeof data === 'object' ? data : {};
        let result = new LightsMovingHeadRgb();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        data["name"] = this.name;
        data["masterDimChannel"] = this.masterDimChannel;
        data["strobeChannel"] = this.strobeChannel;
        if (Array.isArray(this.resetChannelAndValue)) {
            data["resetChannelAndValue"] = [];
            for (let item of this.resetChannelAndValue)
                data["resetChannelAndValue"].push(item);
        }
        data["valuesUpdatedAt"] = this.valuesUpdatedAt ? this.valuesUpdatedAt.toISOString() : <any>undefined;
        data["movement"] = this.movement ? this.movement.toJSON() : <any>undefined;
        data["color"] = this.color ? this.color.toJSON() : <any>undefined;
        data["currentValues"] = this.currentValues;
        return data;
    }
}

export interface ILightsMovingHeadRgb {
    id: number;
    createdAt: Date;
    updatedAt: Date;
    name: string;
    masterDimChannel: number;
    strobeChannel: number;
    resetChannelAndValue?: number[] | undefined;
    valuesUpdatedAt: Date;
    movement: Movement;
    color: Colors;
    currentValues?: CurrentValues;
}

export class LightsGroupMovingHeadRgbs implements ILightsGroupMovingHeadRgbs {
    id!: number;
    createdAt!: Date;
    updatedAt!: Date;
    group!: LightsGroup;
    fixture!: LightsMovingHeadRgb;
    firstChannel!: number;

    constructor(data?: ILightsGroupMovingHeadRgbs) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.group = new LightsGroup();
            this.fixture = new LightsMovingHeadRgb();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            this.group = _data["group"] ? LightsGroup.fromJS(_data["group"]) : new LightsGroup();
            this.fixture = _data["fixture"] ? LightsMovingHeadRgb.fromJS(_data["fixture"]) : new LightsMovingHeadRgb();
            this.firstChannel = _data["firstChannel"];
        }
    }

    static fromJS(data: any): LightsGroupMovingHeadRgbs {
        data = typeof data === 'object' ? data : {};
        let result = new LightsGroupMovingHeadRgbs();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        data["group"] = this.group ? this.group.toJSON() : <any>undefined;
        data["fixture"] = this.fixture ? this.fixture.toJSON() : <any>undefined;
        data["firstChannel"] = this.firstChannel;
        return data;
    }
}

export interface ILightsGroupMovingHeadRgbs {
    id: number;
    createdAt: Date;
    updatedAt: Date;
    group: LightsGroup;
    fixture: LightsMovingHeadRgb;
    firstChannel: number;
}

export class LightsPar implements ILightsPar {
    id!: number;
    createdAt!: Date;
    updatedAt!: Date;
    name!: string;
    masterDimChannel!: number;
    strobeChannel!: number;
    resetChannelAndValue?: number[] | undefined;
    valuesUpdatedAt!: Date;
    color!: Colors;

    constructor(data?: ILightsPar) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.color = new Colors();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.masterDimChannel = _data["masterDimChannel"];
            this.strobeChannel = _data["strobeChannel"];
            if (Array.isArray(_data["resetChannelAndValue"])) {
                this.resetChannelAndValue = [] as any;
                for (let item of _data["resetChannelAndValue"])
                    this.resetChannelAndValue!.push(item);
            }
            this.valuesUpdatedAt = _data["valuesUpdatedAt"] ? new Date(_data["valuesUpdatedAt"].toString()) : <any>undefined;
            this.color = _data["color"] ? Colors.fromJS(_data["color"]) : new Colors();
        }
    }

    static fromJS(data: any): LightsPar {
        data = typeof data === 'object' ? data : {};
        let result = new LightsPar();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        data["name"] = this.name;
        data["masterDimChannel"] = this.masterDimChannel;
        data["strobeChannel"] = this.strobeChannel;
        if (Array.isArray(this.resetChannelAndValue)) {
            data["resetChannelAndValue"] = [];
            for (let item of this.resetChannelAndValue)
                data["resetChannelAndValue"].push(item);
        }
        data["valuesUpdatedAt"] = this.valuesUpdatedAt ? this.valuesUpdatedAt.toISOString() : <any>undefined;
        data["color"] = this.color ? this.color.toJSON() : <any>undefined;
        return data;
    }
}

export interface ILightsPar {
    id: number;
    createdAt: Date;
    updatedAt: Date;
    name: string;
    masterDimChannel: number;
    strobeChannel: number;
    resetChannelAndValue?: number[] | undefined;
    valuesUpdatedAt: Date;
    color: Colors;
}

export class LightsScene implements ILightsScene {
    id!: number;
    createdAt!: Date;
    updatedAt!: Date;
    name!: string;
    pars!: LightsScenePars[];
    movingHeadRgbs!: LightsSceneMovingHeadRgb[];
    movingHeadWheels!: LightsSceneMovingHeadWheel[];

    constructor(data?: ILightsScene) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.pars = [];
            this.movingHeadRgbs = [];
            this.movingHeadWheels = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            this.name = _data["name"];
            if (Array.isArray(_data["pars"])) {
                this.pars = [] as any;
                for (let item of _data["pars"])
                    this.pars!.push(LightsScenePars.fromJS(item));
            }
            if (Array.isArray(_data["movingHeadRgbs"])) {
                this.movingHeadRgbs = [] as any;
                for (let item of _data["movingHeadRgbs"])
                    this.movingHeadRgbs!.push(LightsSceneMovingHeadRgb.fromJS(item));
            }
            if (Array.isArray(_data["movingHeadWheels"])) {
                this.movingHeadWheels = [] as any;
                for (let item of _data["movingHeadWheels"])
                    this.movingHeadWheels!.push(LightsSceneMovingHeadWheel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LightsScene {
        data = typeof data === 'object' ? data : {};
        let result = new LightsScene();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        data["name"] = this.name;
        if (Array.isArray(this.pars)) {
            data["pars"] = [];
            for (let item of this.pars)
                data["pars"].push(item.toJSON());
        }
        if (Array.isArray(this.movingHeadRgbs)) {
            data["movingHeadRgbs"] = [];
            for (let item of this.movingHeadRgbs)
                data["movingHeadRgbs"].push(item.toJSON());
        }
        if (Array.isArray(this.movingHeadWheels)) {
            data["movingHeadWheels"] = [];
            for (let item of this.movingHeadWheels)
                data["movingHeadWheels"].push(item.toJSON());
        }
        return data;
    }
}

export interface ILightsScene {
    id: number;
    createdAt: Date;
    updatedAt: Date;
    name: string;
    pars: LightsScenePars[];
    movingHeadRgbs: LightsSceneMovingHeadRgb[];
    movingHeadWheels: LightsSceneMovingHeadWheel[];
}

export class LightsScenePars implements ILightsScenePars {
    id!: number;
    createdAt!: Date;
    updatedAt!: Date;
    sceneId!: number;
    scene!: LightsScene;
    dmxValues!: number[];
    groupParId!: number;
    par!: LightsGroupPars;

    constructor(data?: ILightsScenePars) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.scene = new LightsScene();
            this.dmxValues = [];
            this.par = new LightsGroupPars();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            this.sceneId = _data["sceneId"];
            this.scene = _data["scene"] ? LightsScene.fromJS(_data["scene"]) : new LightsScene();
            if (Array.isArray(_data["dmxValues"])) {
                this.dmxValues = [] as any;
                for (let item of _data["dmxValues"])
                    this.dmxValues!.push(item);
            }
            this.groupParId = _data["groupParId"];
            this.par = _data["par"] ? LightsGroupPars.fromJS(_data["par"]) : new LightsGroupPars();
        }
    }

    static fromJS(data: any): LightsScenePars {
        data = typeof data === 'object' ? data : {};
        let result = new LightsScenePars();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        data["sceneId"] = this.sceneId;
        data["scene"] = this.scene ? this.scene.toJSON() : <any>undefined;
        if (Array.isArray(this.dmxValues)) {
            data["dmxValues"] = [];
            for (let item of this.dmxValues)
                data["dmxValues"].push(item);
        }
        data["groupParId"] = this.groupParId;
        data["par"] = this.par ? this.par.toJSON() : <any>undefined;
        return data;
    }
}

export interface ILightsScenePars {
    id: number;
    createdAt: Date;
    updatedAt: Date;
    sceneId: number;
    scene: LightsScene;
    dmxValues: number[];
    groupParId: number;
    par: LightsGroupPars;
}

export class LightsSceneMovingHeadRgb implements ILightsSceneMovingHeadRgb {
    id!: number;
    createdAt!: Date;
    updatedAt!: Date;
    sceneId!: number;
    scene!: LightsScene;
    dmxValues!: number[];
    groupMovingHeadRgbId!: number;
    movingHeadRgb!: LightsGroupMovingHeadRgbs;

    constructor(data?: ILightsSceneMovingHeadRgb) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.scene = new LightsScene();
            this.dmxValues = [];
            this.movingHeadRgb = new LightsGroupMovingHeadRgbs();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            this.sceneId = _data["sceneId"];
            this.scene = _data["scene"] ? LightsScene.fromJS(_data["scene"]) : new LightsScene();
            if (Array.isArray(_data["dmxValues"])) {
                this.dmxValues = [] as any;
                for (let item of _data["dmxValues"])
                    this.dmxValues!.push(item);
            }
            this.groupMovingHeadRgbId = _data["groupMovingHeadRgbId"];
            this.movingHeadRgb = _data["movingHeadRgb"] ? LightsGroupMovingHeadRgbs.fromJS(_data["movingHeadRgb"]) : new LightsGroupMovingHeadRgbs();
        }
    }

    static fromJS(data: any): LightsSceneMovingHeadRgb {
        data = typeof data === 'object' ? data : {};
        let result = new LightsSceneMovingHeadRgb();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        data["sceneId"] = this.sceneId;
        data["scene"] = this.scene ? this.scene.toJSON() : <any>undefined;
        if (Array.isArray(this.dmxValues)) {
            data["dmxValues"] = [];
            for (let item of this.dmxValues)
                data["dmxValues"].push(item);
        }
        data["groupMovingHeadRgbId"] = this.groupMovingHeadRgbId;
        data["movingHeadRgb"] = this.movingHeadRgb ? this.movingHeadRgb.toJSON() : <any>undefined;
        return data;
    }
}

export interface ILightsSceneMovingHeadRgb {
    id: number;
    createdAt: Date;
    updatedAt: Date;
    sceneId: number;
    scene: LightsScene;
    dmxValues: number[];
    groupMovingHeadRgbId: number;
    movingHeadRgb: LightsGroupMovingHeadRgbs;
}

export class LightsSceneMovingHeadWheel implements ILightsSceneMovingHeadWheel {
    id!: number;
    createdAt!: Date;
    updatedAt!: Date;
    sceneId!: number;
    scene!: LightsScene;
    dmxValues!: number[];
    groupMovingHeadWheelId!: number;
    movingHeadWheel!: LightsGroupMovingHeadWheels;

    constructor(data?: ILightsSceneMovingHeadWheel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.scene = new LightsScene();
            this.dmxValues = [];
            this.movingHeadWheel = new LightsGroupMovingHeadWheels();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            this.sceneId = _data["sceneId"];
            this.scene = _data["scene"] ? LightsScene.fromJS(_data["scene"]) : new LightsScene();
            if (Array.isArray(_data["dmxValues"])) {
                this.dmxValues = [] as any;
                for (let item of _data["dmxValues"])
                    this.dmxValues!.push(item);
            }
            this.groupMovingHeadWheelId = _data["groupMovingHeadWheelId"];
            this.movingHeadWheel = _data["movingHeadWheel"] ? LightsGroupMovingHeadWheels.fromJS(_data["movingHeadWheel"]) : new LightsGroupMovingHeadWheels();
        }
    }

    static fromJS(data: any): LightsSceneMovingHeadWheel {
        data = typeof data === 'object' ? data : {};
        let result = new LightsSceneMovingHeadWheel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        data["sceneId"] = this.sceneId;
        data["scene"] = this.scene ? this.scene.toJSON() : <any>undefined;
        if (Array.isArray(this.dmxValues)) {
            data["dmxValues"] = [];
            for (let item of this.dmxValues)
                data["dmxValues"].push(item);
        }
        data["groupMovingHeadWheelId"] = this.groupMovingHeadWheelId;
        data["movingHeadWheel"] = this.movingHeadWheel ? this.movingHeadWheel.toJSON() : <any>undefined;
        return data;
    }
}

export interface ILightsSceneMovingHeadWheel {
    id: number;
    createdAt: Date;
    updatedAt: Date;
    sceneId: number;
    scene: LightsScene;
    dmxValues: number[];
    groupMovingHeadWheelId: number;
    movingHeadWheel: LightsGroupMovingHeadWheels;
}

export class SceneFixtureParams implements ISceneFixtureParams {
    id!: number;
    dmxValues!: number[];

    constructor(data?: ISceneFixtureParams) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.dmxValues = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            if (Array.isArray(_data["dmxValues"])) {
                this.dmxValues = [] as any;
                for (let item of _data["dmxValues"])
                    this.dmxValues!.push(item);
            }
        }
    }

    static fromJS(data: any): SceneFixtureParams {
        data = typeof data === 'object' ? data : {};
        let result = new SceneFixtureParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (Array.isArray(this.dmxValues)) {
            data["dmxValues"] = [];
            for (let item of this.dmxValues)
                data["dmxValues"].push(item);
        }
        return data;
    }
}

export interface ISceneFixtureParams {
    id: number;
    dmxValues: number[];
}

export class CreateSceneParams implements ICreateSceneParams {
    name!: string;
    pars!: SceneFixtureParams[];
    movingHeadRgbs!: SceneFixtureParams[];
    movingHeadWheels!: SceneFixtureParams[];

    constructor(data?: ICreateSceneParams) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.pars = [];
            this.movingHeadRgbs = [];
            this.movingHeadWheels = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            if (Array.isArray(_data["pars"])) {
                this.pars = [] as any;
                for (let item of _data["pars"])
                    this.pars!.push(SceneFixtureParams.fromJS(item));
            }
            if (Array.isArray(_data["movingHeadRgbs"])) {
                this.movingHeadRgbs = [] as any;
                for (let item of _data["movingHeadRgbs"])
                    this.movingHeadRgbs!.push(SceneFixtureParams.fromJS(item));
            }
            if (Array.isArray(_data["movingHeadWheels"])) {
                this.movingHeadWheels = [] as any;
                for (let item of _data["movingHeadWheels"])
                    this.movingHeadWheels!.push(SceneFixtureParams.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateSceneParams {
        data = typeof data === 'object' ? data : {};
        let result = new CreateSceneParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (Array.isArray(this.pars)) {
            data["pars"] = [];
            for (let item of this.pars)
                data["pars"].push(item.toJSON());
        }
        if (Array.isArray(this.movingHeadRgbs)) {
            data["movingHeadRgbs"] = [];
            for (let item of this.movingHeadRgbs)
                data["movingHeadRgbs"].push(item.toJSON());
        }
        if (Array.isArray(this.movingHeadWheels)) {
            data["movingHeadWheels"] = [];
            for (let item of this.movingHeadWheels)
                data["movingHeadWheels"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICreateSceneParams {
    name: string;
    pars: SceneFixtureParams[];
    movingHeadRgbs: SceneFixtureParams[];
    movingHeadWheels: SceneFixtureParams[];
}

export class BaseLightsEffectCreateParams implements IBaseLightsEffectCreateParams {

    [key: string]: any;

    constructor(data?: IBaseLightsEffectCreateParams) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): BaseLightsEffectCreateParams {
        data = typeof data === 'object' ? data : {};
        let result = new BaseLightsEffectCreateParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface IBaseLightsEffectCreateParams {

    [key: string]: any;
}

export enum RgbColor {
    White = "white",
    Red = "red",
    Green = "green",
    Blue = "blue",
    Yellow = "yellow",
    Lightblue = "lightblue",
    Orange = "orange",
    Rosered = "rosered",
    Purple = "purple",
    Cyan = "cyan",
    Pink = "pink",
    Gold = "gold",
    Brown = "brown",
    Lightpink = "lightpink",
    Lime = "lime",
    Uv = "uv",
    Blindingwhite = "blindingwhite",
}

export class BeatFadeOutProps implements IBeatFadeOutProps {
    /** One or more colors that should be shown */
    colors!: RgbColor[];
    /** Whether the lights should be turned off using a fade effect
on each beat */
    enableFade?: boolean;
    /** If a "black" color should be added */
    addBlacks?: boolean;

    constructor(data?: IBeatFadeOutProps) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.colors = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["colors"])) {
                this.colors = [] as any;
                for (let item of _data["colors"])
                    this.colors!.push(item);
            }
            this.enableFade = _data["enableFade"];
            this.addBlacks = _data["addBlacks"];
        }
    }

    static fromJS(data: any): BeatFadeOutProps {
        data = typeof data === 'object' ? data : {};
        let result = new BeatFadeOutProps();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.colors)) {
            data["colors"] = [];
            for (let item of this.colors)
                data["colors"].push(item);
        }
        data["enableFade"] = this.enableFade;
        data["addBlacks"] = this.addBlacks;
        return data;
    }
}

export interface IBeatFadeOutProps {
    /** One or more colors that should be shown */
    colors: RgbColor[];
    /** Whether the lights should be turned off using a fade effect
on each beat */
    enableFade?: boolean;
    /** If a "black" color should be added */
    addBlacks?: boolean;
}

export class BeatFadeOutCreateParams extends BaseLightsEffectCreateParams implements IBeatFadeOutCreateParams {
    props!: BeatFadeOutProps;
    type!: BeatFadeOutCreateParamsType;

    [key: string]: any;

    constructor(data?: IBeatFadeOutCreateParams) {
        super(data);
        if (!data) {
            this.props = new BeatFadeOutProps();
        }
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.props = _data["props"] ? BeatFadeOutProps.fromJS(_data["props"]) : new BeatFadeOutProps();
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): BeatFadeOutCreateParams {
        data = typeof data === 'object' ? data : {};
        let result = new BeatFadeOutCreateParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["props"] = this.props ? this.props.toJSON() : <any>undefined;
        data["type"] = this.type;
        super.toJSON(data);
        return data;
    }
}

export interface IBeatFadeOutCreateParams extends IBaseLightsEffectCreateParams {
    props: BeatFadeOutProps;
    type: BeatFadeOutCreateParamsType;

    [key: string]: any;
}

export class SearchLightProps implements ISearchLightProps {
    /** Radius of the search light */
    radiusFactor?: number;
    /** Time for the moving head to go around (in milliseconds) */
    cycleTime?: number;
    /** What phase the lights should move apart from each other. 0 for synchronous */
    offsetFactor?: number;

    constructor(data?: ISearchLightProps) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.radiusFactor = _data["radiusFactor"];
            this.cycleTime = _data["cycleTime"];
            this.offsetFactor = _data["offsetFactor"];
        }
    }

    static fromJS(data: any): SearchLightProps {
        data = typeof data === 'object' ? data : {};
        let result = new SearchLightProps();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["radiusFactor"] = this.radiusFactor;
        data["cycleTime"] = this.cycleTime;
        data["offsetFactor"] = this.offsetFactor;
        return data;
    }
}

export interface ISearchLightProps {
    /** Radius of the search light */
    radiusFactor?: number;
    /** Time for the moving head to go around (in milliseconds) */
    cycleTime?: number;
    /** What phase the lights should move apart from each other. 0 for synchronous */
    offsetFactor?: number;
}

export class SearchLightCreateParams extends BaseLightsEffectCreateParams implements ISearchLightCreateParams {
    props!: SearchLightProps;
    type!: SearchLightCreateParamsType;

    [key: string]: any;

    constructor(data?: ISearchLightCreateParams) {
        super(data);
        if (!data) {
            this.props = new SearchLightProps();
        }
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.props = _data["props"] ? SearchLightProps.fromJS(_data["props"]) : new SearchLightProps();
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): SearchLightCreateParams {
        data = typeof data === 'object' ? data : {};
        let result = new SearchLightCreateParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["props"] = this.props ? this.props.toJSON() : <any>undefined;
        data["type"] = this.type;
        super.toJSON(data);
        return data;
    }
}

export interface ISearchLightCreateParams extends IBaseLightsEffectCreateParams {
    props: SearchLightProps;
    type: SearchLightCreateParamsType;

    [key: string]: any;
}

export class SingleFloodProps implements ISingleFloodProps {
    /** In how many milliseconds the lights should turn off with a dim effect */
    dimMilliseconds?: number;

    constructor(data?: ISingleFloodProps) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dimMilliseconds = _data["dimMilliseconds"];
        }
    }

    static fromJS(data: any): SingleFloodProps {
        data = typeof data === 'object' ? data : {};
        let result = new SingleFloodProps();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dimMilliseconds"] = this.dimMilliseconds;
        return data;
    }
}

export interface ISingleFloodProps {
    /** In how many milliseconds the lights should turn off with a dim effect */
    dimMilliseconds?: number;
}

export class SingleFloodCreateParams extends BaseLightsEffectCreateParams implements ISingleFloodCreateParams {
    props!: SingleFloodProps;
    type!: SingleFloodCreateParamsType;

    [key: string]: any;

    constructor(data?: ISingleFloodCreateParams) {
        super(data);
        if (!data) {
            this.props = new SingleFloodProps();
        }
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.props = _data["props"] ? SingleFloodProps.fromJS(_data["props"]) : new SingleFloodProps();
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): SingleFloodCreateParams {
        data = typeof data === 'object' ? data : {};
        let result = new SingleFloodCreateParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["props"] = this.props ? this.props.toJSON() : <any>undefined;
        data["type"] = this.type;
        super.toJSON(data);
        return data;
    }
}

export interface ISingleFloodCreateParams extends IBaseLightsEffectCreateParams {
    props: SingleFloodProps;
    type: SingleFloodCreateParamsType;

    [key: string]: any;
}

export class SparkleProps implements ISparkleProps {
    /** Colors of the lights */
    colors!: RgbColor[];
    /** What percentage (on average) of the lights should be turned on */
    ratio?: number;
    /** How many ms the light should take to slowly turn off */
    dimDuration?: number;
    /** After how many ms (approximately) a ratio of lights should be turned on */
    cycleTime?: number;

    constructor(data?: ISparkleProps) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.colors = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["colors"])) {
                this.colors = [] as any;
                for (let item of _data["colors"])
                    this.colors!.push(item);
            }
            this.ratio = _data["ratio"];
            this.dimDuration = _data["dimDuration"];
            this.cycleTime = _data["cycleTime"];
        }
    }

    static fromJS(data: any): SparkleProps {
        data = typeof data === 'object' ? data : {};
        let result = new SparkleProps();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.colors)) {
            data["colors"] = [];
            for (let item of this.colors)
                data["colors"].push(item);
        }
        data["ratio"] = this.ratio;
        data["dimDuration"] = this.dimDuration;
        data["cycleTime"] = this.cycleTime;
        return data;
    }
}

export interface ISparkleProps {
    /** Colors of the lights */
    colors: RgbColor[];
    /** What percentage (on average) of the lights should be turned on */
    ratio?: number;
    /** How many ms the light should take to slowly turn off */
    dimDuration?: number;
    /** After how many ms (approximately) a ratio of lights should be turned on */
    cycleTime?: number;
}

export class SparkleCreateParams extends BaseLightsEffectCreateParams implements ISparkleCreateParams {
    props!: SparkleProps;
    type!: SparkleCreateParamsType;

    [key: string]: any;

    constructor(data?: ISparkleCreateParams) {
        super(data);
        if (!data) {
            this.props = new SparkleProps();
        }
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.props = _data["props"] ? SparkleProps.fromJS(_data["props"]) : new SparkleProps();
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): SparkleCreateParams {
        data = typeof data === 'object' ? data : {};
        let result = new SparkleCreateParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["props"] = this.props ? this.props.toJSON() : <any>undefined;
        data["type"] = this.type;
        super.toJSON(data);
        return data;
    }
}

export interface ISparkleCreateParams extends IBaseLightsEffectCreateParams {
    props: SparkleProps;
    type: SparkleCreateParamsType;

    [key: string]: any;
}

export class StaticColorProps implements IStaticColorProps {
    /** Color that should be shown */
    color!: RgbColor;

    constructor(data?: IStaticColorProps) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.color = _data["color"];
        }
    }

    static fromJS(data: any): StaticColorProps {
        data = typeof data === 'object' ? data : {};
        let result = new StaticColorProps();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["color"] = this.color;
        return data;
    }
}

export interface IStaticColorProps {
    /** Color that should be shown */
    color: RgbColor;
}

export class StaticColorCreateParams extends BaseLightsEffectCreateParams implements IStaticColorCreateParams {
    props!: StaticColorProps;
    type!: StaticColorCreateParamsType;

    [key: string]: any;

    constructor(data?: IStaticColorCreateParams) {
        super(data);
        if (!data) {
            this.props = new StaticColorProps();
        }
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.props = _data["props"] ? StaticColorProps.fromJS(_data["props"]) : new StaticColorProps();
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): StaticColorCreateParams {
        data = typeof data === 'object' ? data : {};
        let result = new StaticColorCreateParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["props"] = this.props ? this.props.toJSON() : <any>undefined;
        data["type"] = this.type;
        super.toJSON(data);
        return data;
    }
}

export interface IStaticColorCreateParams extends IBaseLightsEffectCreateParams {
    props: StaticColorProps;
    type: StaticColorCreateParamsType;

    [key: string]: any;
}

export class StrobeProps implements IStrobeProps {
    /** Duration in milliseconds */
    durationMs?: number;

    constructor(data?: IStrobeProps) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.durationMs = _data["durationMs"];
        }
    }

    static fromJS(data: any): StrobeProps {
        data = typeof data === 'object' ? data : {};
        let result = new StrobeProps();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["durationMs"] = this.durationMs;
        return data;
    }
}

export interface IStrobeProps {
    /** Duration in milliseconds */
    durationMs?: number;
}

export class StrobeCreateParams extends BaseLightsEffectCreateParams implements IStrobeCreateParams {
    props!: StrobeProps;
    type!: StrobeCreateParamsType;

    [key: string]: any;

    constructor(data?: IStrobeCreateParams) {
        super(data);
        if (!data) {
            this.props = new StrobeProps();
        }
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.props = _data["props"] ? StrobeProps.fromJS(_data["props"]) : new StrobeProps();
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): StrobeCreateParams {
        data = typeof data === 'object' ? data : {};
        let result = new StrobeCreateParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["props"] = this.props ? this.props.toJSON() : <any>undefined;
        data["type"] = this.type;
        super.toJSON(data);
        return data;
    }
}

export interface IStrobeCreateParams extends IBaseLightsEffectCreateParams {
    props: StrobeProps;
    type: StrobeCreateParamsType;

    [key: string]: any;
}

export class WaveProps implements IWaveProps {
    /** Color of the lights */
    color!: RgbColor;
    /** Relative size of the wave */
    size?: number;
    /** How many ms each cycle of the wave takes */
    cycleTime?: number;

    constructor(data?: IWaveProps) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.color = _data["color"];
            this.size = _data["size"];
            this.cycleTime = _data["cycleTime"];
        }
    }

    static fromJS(data: any): WaveProps {
        data = typeof data === 'object' ? data : {};
        let result = new WaveProps();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["color"] = this.color;
        data["size"] = this.size;
        data["cycleTime"] = this.cycleTime;
        return data;
    }
}

export interface IWaveProps {
    /** Color of the lights */
    color: RgbColor;
    /** Relative size of the wave */
    size?: number;
    /** How many ms each cycle of the wave takes */
    cycleTime?: number;
}

export class WaveCreateParams extends BaseLightsEffectCreateParams implements IWaveCreateParams {
    props!: WaveProps;
    type!: WaveCreateParamsType;

    [key: string]: any;

    constructor(data?: IWaveCreateParams) {
        super(data);
        if (!data) {
            this.props = new WaveProps();
        }
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.props = _data["props"] ? WaveProps.fromJS(_data["props"]) : new WaveProps();
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): WaveCreateParams {
        data = typeof data === 'object' ? data : {};
        let result = new WaveCreateParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["props"] = this.props ? this.props.toJSON() : <any>undefined;
        data["type"] = this.type;
        super.toJSON(data);
        return data;
    }
}

export interface IWaveCreateParams extends IBaseLightsEffectCreateParams {
    props: WaveProps;
    type: WaveCreateParamsType;

    [key: string]: any;
}

export class LightsEffectsCreateParams implements ILightsEffectsCreateParams {

    [key: string]: any;

    constructor(data?: ILightsEffectsCreateParams) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): LightsEffectsCreateParams {
        data = typeof data === 'object' ? data : {};
        let result = new LightsEffectsCreateParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface ILightsEffectsCreateParams {

    [key: string]: any;
}

export class Information implements IInformation {
    id!: number;
    createdAt!: Date;
    updatedAt!: Date;
    roomStatus!: string;
    alcoholTime!: string;
    firstResponsible!: string;
    secondResponsible?: string;
    firstERO?: string;
    secondERO?: string;

    constructor(data?: IInformation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            this.roomStatus = _data["roomStatus"];
            this.alcoholTime = _data["alcoholTime"];
            this.firstResponsible = _data["firstResponsible"];
            this.secondResponsible = _data["secondResponsible"];
            this.firstERO = _data["firstERO"];
            this.secondERO = _data["secondERO"];
        }
    }

    static fromJS(data: any): Information {
        data = typeof data === 'object' ? data : {};
        let result = new Information();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        data["roomStatus"] = this.roomStatus;
        data["alcoholTime"] = this.alcoholTime;
        data["firstResponsible"] = this.firstResponsible;
        data["secondResponsible"] = this.secondResponsible;
        data["firstERO"] = this.firstERO;
        data["secondERO"] = this.secondERO;
        return data;
    }
}

export interface IInformation {
    id: number;
    createdAt: Date;
    updatedAt: Date;
    roomStatus: string;
    alcoholTime: string;
    firstResponsible: string;
    secondResponsible?: string;
    firstERO?: string;
    secondERO?: string;
}

export class FieldErrors implements IFieldErrors {

    [key: string]: Anonymous7 | any;

    constructor(data?: IFieldErrors) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): FieldErrors {
        data = typeof data === 'object' ? data : {};
        let result = new FieldErrors();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface IFieldErrors {

    [key: string]: Anonymous7 | any;
}

export class ValidateError implements IValidateError {
    name!: string;
    message!: string;
    stack?: string;
    status!: number;
    fields!: FieldErrors;

    constructor(data?: IValidateError) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.fields = new FieldErrors();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.message = _data["message"];
            this.stack = _data["stack"];
            this.status = _data["status"];
            this.fields = _data["fields"] ? FieldErrors.fromJS(_data["fields"]) : new FieldErrors();
        }
    }

    static fromJS(data: any): ValidateError {
        data = typeof data === 'object' ? data : {};
        let result = new ValidateError();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["message"] = this.message;
        data["stack"] = this.stack;
        data["status"] = this.status;
        data["fields"] = this.fields ? this.fields.toJSON() : <any>undefined;
        return data;
    }
}

export interface IValidateError {
    name: string;
    message: string;
    stack?: string;
    status: number;
    fields: FieldErrors;
}

export enum RoomStatus {
    Open = "Open",
    Closed = "Closed",
}

export enum AlcoholTime {
    _1630 = "16:30",
    _1400 = "14:00",
}

export class InformationParams implements IInformationParams {
    roomStatus!: RoomStatus;
    alcoholTime!: AlcoholTime;
    firstResponsible!: string;
    secondResponsible?: string;
    firstERO?: string;
    secondERO?: string;

    constructor(data?: IInformationParams) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomStatus = _data["roomStatus"];
            this.alcoholTime = _data["alcoholTime"];
            this.firstResponsible = _data["firstResponsible"];
            this.secondResponsible = _data["secondResponsible"];
            this.firstERO = _data["firstERO"];
            this.secondERO = _data["secondERO"];
        }
    }

    static fromJS(data: any): InformationParams {
        data = typeof data === 'object' ? data : {};
        let result = new InformationParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomStatus"] = this.roomStatus;
        data["alcoholTime"] = this.alcoholTime;
        data["firstResponsible"] = this.firstResponsible;
        data["secondResponsible"] = this.secondResponsible;
        data["firstERO"] = this.firstERO;
        data["secondERO"] = this.secondERO;
        return data;
    }
}

export interface IInformationParams {
    roomStatus: RoomStatus;
    alcoholTime: AlcoholTime;
    firstResponsible: string;
    secondResponsible?: string;
    firstERO?: string;
    secondERO?: string;
}

export class Message implements IMessage {
    id!: number;
    createdAt!: Date;
    updatedAt!: Date;
    user!: string;
    message!: string;

    constructor(data?: IMessage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            this.user = _data["user"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Message {
        data = typeof data === 'object' ? data : {};
        let result = new Message();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        data["user"] = this.user;
        data["message"] = this.message;
        return data;
    }
}

export interface IMessage {
    id: number;
    createdAt: Date;
    updatedAt: Date;
    user: string;
    message: string;
}

export class MessageParams implements IMessageParams {
    user!: string;
    message!: string;

    constructor(data?: IMessageParams) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.user = _data["user"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): MessageParams {
        data = typeof data === 'object' ? data : {};
        let result = new MessageParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["user"] = this.user;
        data["message"] = this.message;
        return data;
    }
}

export interface IMessageParams {
    user: string;
    message: string;
}

/** Make all properties in T optional */
export class Partial_MessageParams_ implements IPartial_MessageParams_ {
    user?: string;
    message?: string;

    [key: string]: any;

    constructor(data?: IPartial_MessageParams_) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.user = _data["user"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Partial_MessageParams_ {
        data = typeof data === 'object' ? data : {};
        let result = new Partial_MessageParams_();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["user"] = this.user;
        data["message"] = this.message;
        return data;
    }
}

/** Make all properties in T optional */
export interface IPartial_MessageParams_ {
    user?: string;
    message?: string;

    [key: string]: any;
}

export class SkipCenturionRequest implements ISkipCenturionRequest {
    seconds!: number;

    constructor(data?: ISkipCenturionRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.seconds = _data["seconds"];
        }
    }

    static fromJS(data: any): SkipCenturionRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SkipCenturionRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["seconds"] = this.seconds;
        return data;
    }
}

export interface ISkipCenturionRequest {
    seconds: number;
}

export class CenturionParams implements ICenturionParams {
    lightsGroupIds!: number[];
    screenIds!: number[];
    audioIds!: number[];
    centurionName!: string;

    constructor(data?: ICenturionParams) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.lightsGroupIds = [];
            this.screenIds = [];
            this.audioIds = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["lightsGroupIds"])) {
                this.lightsGroupIds = [] as any;
                for (let item of _data["lightsGroupIds"])
                    this.lightsGroupIds!.push(item);
            }
            if (Array.isArray(_data["screenIds"])) {
                this.screenIds = [] as any;
                for (let item of _data["screenIds"])
                    this.screenIds!.push(item);
            }
            if (Array.isArray(_data["audioIds"])) {
                this.audioIds = [] as any;
                for (let item of _data["audioIds"])
                    this.audioIds!.push(item);
            }
            this.centurionName = _data["centurionName"];
        }
    }

    static fromJS(data: any): CenturionParams {
        data = typeof data === 'object' ? data : {};
        let result = new CenturionParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.lightsGroupIds)) {
            data["lightsGroupIds"] = [];
            for (let item of this.lightsGroupIds)
                data["lightsGroupIds"].push(item);
        }
        if (Array.isArray(this.screenIds)) {
            data["screenIds"] = [];
            for (let item of this.screenIds)
                data["screenIds"].push(item);
        }
        if (Array.isArray(this.audioIds)) {
            data["audioIds"] = [];
            for (let item of this.audioIds)
                data["audioIds"].push(item);
        }
        data["centurionName"] = this.centurionName;
        return data;
    }
}

export interface ICenturionParams {
    lightsGroupIds: number[];
    screenIds: number[];
    audioIds: number[];
    centurionName: string;
}

export class Audio implements IAudio {
    id!: number;
    createdAt!: Date;
    updatedAt!: Date;
    currentHandler?: string;
    name!: string;
    /** ID of the socket connection if present.
Required to send events specifically and only to this entity */
    socketId?: string;
    /** Whether this audio object is currently playing anything */
    playing?: boolean;

    constructor(data?: IAudio) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.playing = false;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            this.currentHandler = _data["currentHandler"];
            this.name = _data["name"];
            this.socketId = _data["socketId"];
            this.playing = _data["playing"] !== undefined ? _data["playing"] : false;
        }
    }

    static fromJS(data: any): Audio {
        data = typeof data === 'object' ? data : {};
        let result = new Audio();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        data["currentHandler"] = this.currentHandler;
        data["name"] = this.name;
        data["socketId"] = this.socketId;
        data["playing"] = this.playing;
        return data;
    }
}

export interface IAudio {
    id: number;
    createdAt: Date;
    updatedAt: Date;
    currentHandler?: string;
    name: string;
    /** ID of the socket connection if present.
Required to send events specifically and only to this entity */
    socketId?: string;
    /** Whether this audio object is currently playing anything */
    playing?: boolean;
}

export class HandlerResponse_Audio_ implements IHandlerResponse_Audio_ {
    entities!: Audio[];
    id!: string;
    name!: string;

    constructor(data?: IHandlerResponse_Audio_) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.entities = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["entities"])) {
                this.entities = [] as any;
                for (let item of _data["entities"])
                    this.entities!.push(Audio.fromJS(item));
            }
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): HandlerResponse_Audio_ {
        data = typeof data === 'object' ? data : {};
        let result = new HandlerResponse_Audio_();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.entities)) {
            data["entities"] = [];
            for (let item of this.entities)
                data["entities"].push(item.toJSON());
        }
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IHandlerResponse_Audio_ {
    entities: Audio[];
    id: string;
    name: string;
}

export class HandlerResponse_LightsGroup_ implements IHandlerResponse_LightsGroup_ {
    entities!: LightsGroup[];
    id!: string;
    name!: string;

    constructor(data?: IHandlerResponse_LightsGroup_) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.entities = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["entities"])) {
                this.entities = [] as any;
                for (let item of _data["entities"])
                    this.entities!.push(LightsGroup.fromJS(item));
            }
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): HandlerResponse_LightsGroup_ {
        data = typeof data === 'object' ? data : {};
        let result = new HandlerResponse_LightsGroup_();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.entities)) {
            data["entities"] = [];
            for (let item of this.entities)
                data["entities"].push(item.toJSON());
        }
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IHandlerResponse_LightsGroup_ {
    entities: LightsGroup[];
    id: string;
    name: string;
}

export class Screen implements IScreen {
    id!: number;
    createdAt!: Date;
    updatedAt!: Date;
    currentHandler?: string;
    name!: string;
    /** ID of the socket connection if present.
Required to send events specifically and only to this entity */
    socketId?: string;

    constructor(data?: IScreen) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            this.currentHandler = _data["currentHandler"];
            this.name = _data["name"];
            this.socketId = _data["socketId"];
        }
    }

    static fromJS(data: any): Screen {
        data = typeof data === 'object' ? data : {};
        let result = new Screen();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        data["currentHandler"] = this.currentHandler;
        data["name"] = this.name;
        data["socketId"] = this.socketId;
        return data;
    }
}

export interface IScreen {
    id: number;
    createdAt: Date;
    updatedAt: Date;
    currentHandler?: string;
    name: string;
    /** ID of the socket connection if present.
Required to send events specifically and only to this entity */
    socketId?: string;
}

export class HandlerResponse_Screen_ implements IHandlerResponse_Screen_ {
    entities!: Screen[];
    id!: string;
    name!: string;

    constructor(data?: IHandlerResponse_Screen_) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.entities = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["entities"])) {
                this.entities = [] as any;
                for (let item of _data["entities"])
                    this.entities!.push(Screen.fromJS(item));
            }
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): HandlerResponse_Screen_ {
        data = typeof data === 'object' ? data : {};
        let result = new HandlerResponse_Screen_();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.entities)) {
            data["entities"] = [];
            for (let item of this.entities)
                data["entities"].push(item.toJSON());
        }
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IHandlerResponse_Screen_ {
    entities: Screen[];
    id: string;
    name: string;
}

export class AudioResponse implements IAudioResponse {
    name!: string;
    id!: number;
    createdAt!: Date;
    updatedAt!: Date;

    constructor(data?: IAudioResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.id = _data["id"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): AudioResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AudioResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["id"] = this.id;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        return data;
    }
}

export interface IAudioResponse {
    name: string;
    id: number;
    createdAt: Date;
    updatedAt: Date;
}

export class AudioCreateParams implements IAudioCreateParams {
    name!: string;

    constructor(data?: IAudioCreateParams) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): AudioCreateParams {
        data = typeof data === 'object' ? data : {};
        let result = new AudioCreateParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    }
}

export interface IAudioCreateParams {
    name: string;
}

export class LightsControllerResponse implements ILightsControllerResponse {
    name!: string;
    id!: number;
    createdAt!: Date;
    updatedAt!: Date;

    constructor(data?: ILightsControllerResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.id = _data["id"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): LightsControllerResponse {
        data = typeof data === 'object' ? data : {};
        let result = new LightsControllerResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["id"] = this.id;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        return data;
    }
}

export interface ILightsControllerResponse {
    name: string;
    id: number;
    createdAt: Date;
    updatedAt: Date;
}

export class LightsControllerCreateParams implements ILightsControllerCreateParams {
    name!: string;

    constructor(data?: ILightsControllerCreateParams) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): LightsControllerCreateParams {
        data = typeof data === 'object' ? data : {};
        let result = new LightsControllerCreateParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    }
}

export interface ILightsControllerCreateParams {
    name: string;
}

export class BaseLightsGroupResponse implements IBaseLightsGroupResponse {
    name!: string;
    id!: number;
    createdAt!: Date;
    updatedAt!: Date;

    constructor(data?: IBaseLightsGroupResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.id = _data["id"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): BaseLightsGroupResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BaseLightsGroupResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["id"] = this.id;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        return data;
    }
}

export interface IBaseLightsGroupResponse {
    name: string;
    id: number;
    createdAt: Date;
    updatedAt: Date;
}

export class LightsFixtureResponse implements ILightsFixtureResponse {
    name!: string;
    masterDimChannel!: number;
    strobeChannel!: number;
    id!: number;
    createdAt!: Date;
    updatedAt!: Date;

    constructor(data?: ILightsFixtureResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.masterDimChannel = _data["masterDimChannel"];
            this.strobeChannel = _data["strobeChannel"];
            this.id = _data["id"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): LightsFixtureResponse {
        data = typeof data === 'object' ? data : {};
        let result = new LightsFixtureResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["masterDimChannel"] = this.masterDimChannel;
        data["strobeChannel"] = this.strobeChannel;
        data["id"] = this.id;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        return data;
    }
}

export interface ILightsFixtureResponse {
    name: string;
    masterDimChannel: number;
    strobeChannel: number;
    id: number;
    createdAt: Date;
    updatedAt: Date;
}

export class ColorResponse implements IColorResponse {
    redChannel!: number;
    blueChannel!: number;
    greenChannel!: number;
    coldWhiteChannel?: number | undefined;
    warmWhiteChannel?: number | undefined;
    amberChannel?: number | undefined;
    uvChannel?: number | undefined;

    constructor(data?: IColorResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.redChannel = _data["redChannel"];
            this.blueChannel = _data["blueChannel"];
            this.greenChannel = _data["greenChannel"];
            this.coldWhiteChannel = _data["coldWhiteChannel"];
            this.warmWhiteChannel = _data["warmWhiteChannel"];
            this.amberChannel = _data["amberChannel"];
            this.uvChannel = _data["uvChannel"];
        }
    }

    static fromJS(data: any): ColorResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ColorResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["redChannel"] = this.redChannel;
        data["blueChannel"] = this.blueChannel;
        data["greenChannel"] = this.greenChannel;
        data["coldWhiteChannel"] = this.coldWhiteChannel;
        data["warmWhiteChannel"] = this.warmWhiteChannel;
        data["amberChannel"] = this.amberChannel;
        data["uvChannel"] = this.uvChannel;
        return data;
    }
}

export interface IColorResponse {
    redChannel: number;
    blueChannel: number;
    greenChannel: number;
    coldWhiteChannel?: number | undefined;
    warmWhiteChannel?: number | undefined;
    amberChannel?: number | undefined;
    uvChannel?: number | undefined;
}

export class MovingHeadResponse implements IMovingHeadResponse {
    name!: string;
    masterDimChannel!: number;
    strobeChannel!: number;
    id!: number;
    createdAt!: Date;
    updatedAt!: Date;
    panChannel!: number;
    finePanChannel?: number | undefined;
    tiltChannel!: number;
    fineTiltChannel?: number | undefined;
    movingSpeedChannel?: number | undefined;

    constructor(data?: IMovingHeadResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.masterDimChannel = _data["masterDimChannel"];
            this.strobeChannel = _data["strobeChannel"];
            this.id = _data["id"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            this.panChannel = _data["panChannel"];
            this.finePanChannel = _data["finePanChannel"];
            this.tiltChannel = _data["tiltChannel"];
            this.fineTiltChannel = _data["fineTiltChannel"];
            this.movingSpeedChannel = _data["movingSpeedChannel"];
        }
    }

    static fromJS(data: any): MovingHeadResponse {
        data = typeof data === 'object' ? data : {};
        let result = new MovingHeadResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["masterDimChannel"] = this.masterDimChannel;
        data["strobeChannel"] = this.strobeChannel;
        data["id"] = this.id;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        data["panChannel"] = this.panChannel;
        data["finePanChannel"] = this.finePanChannel;
        data["tiltChannel"] = this.tiltChannel;
        data["fineTiltChannel"] = this.fineTiltChannel;
        data["movingSpeedChannel"] = this.movingSpeedChannel;
        return data;
    }
}

export interface IMovingHeadResponse {
    name: string;
    masterDimChannel: number;
    strobeChannel: number;
    id: number;
    createdAt: Date;
    updatedAt: Date;
    panChannel: number;
    finePanChannel?: number | undefined;
    tiltChannel: number;
    fineTiltChannel?: number | undefined;
    movingSpeedChannel?: number | undefined;
}

export class MovingHeadWheelResponse implements IMovingHeadWheelResponse {
    name!: string;
    masterDimChannel!: number;
    strobeChannel!: number;
    id!: number;
    createdAt!: Date;
    updatedAt!: Date;
    colorWheelChannel!: number;
    goboWheelChannel!: number;
    goboRotateChannel!: number | undefined;

    constructor(data?: IMovingHeadWheelResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.masterDimChannel = _data["masterDimChannel"];
            this.strobeChannel = _data["strobeChannel"];
            this.id = _data["id"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            this.colorWheelChannel = _data["colorWheelChannel"];
            this.goboWheelChannel = _data["goboWheelChannel"];
            this.goboRotateChannel = _data["goboRotateChannel"];
        }
    }

    static fromJS(data: any): MovingHeadWheelResponse {
        data = typeof data === 'object' ? data : {};
        let result = new MovingHeadWheelResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["masterDimChannel"] = this.masterDimChannel;
        data["strobeChannel"] = this.strobeChannel;
        data["id"] = this.id;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        data["colorWheelChannel"] = this.colorWheelChannel;
        data["goboWheelChannel"] = this.goboWheelChannel;
        data["goboRotateChannel"] = this.goboRotateChannel;
        return data;
    }
}

export interface IMovingHeadWheelResponse {
    name: string;
    masterDimChannel: number;
    strobeChannel: number;
    id: number;
    createdAt: Date;
    updatedAt: Date;
    colorWheelChannel: number;
    goboWheelChannel: number;
    goboRotateChannel: number | undefined;
}

export class LightsGroupResponse implements ILightsGroupResponse {
    name!: string;
    id!: number;
    createdAt!: Date;
    updatedAt!: Date;
    pars!: Pars[];
    movingHeadRgbs!: MovingHeadRgbs[];
    movingHeadWheels!: MovingHeadWheelResponse[];

    constructor(data?: ILightsGroupResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.pars = [];
            this.movingHeadRgbs = [];
            this.movingHeadWheels = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.id = _data["id"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            if (Array.isArray(_data["pars"])) {
                this.pars = [] as any;
                for (let item of _data["pars"])
                    this.pars!.push(item);
            }
            if (Array.isArray(_data["movingHeadRgbs"])) {
                this.movingHeadRgbs = [] as any;
                for (let item of _data["movingHeadRgbs"])
                    this.movingHeadRgbs!.push(item);
            }
            if (Array.isArray(_data["movingHeadWheels"])) {
                this.movingHeadWheels = [] as any;
                for (let item of _data["movingHeadWheels"])
                    this.movingHeadWheels!.push(MovingHeadWheelResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LightsGroupResponse {
        data = typeof data === 'object' ? data : {};
        let result = new LightsGroupResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["id"] = this.id;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        if (Array.isArray(this.pars)) {
            data["pars"] = [];
            for (let item of this.pars)
                data["pars"].push(item);
        }
        if (Array.isArray(this.movingHeadRgbs)) {
            data["movingHeadRgbs"] = [];
            for (let item of this.movingHeadRgbs)
                data["movingHeadRgbs"].push(item);
        }
        if (Array.isArray(this.movingHeadWheels)) {
            data["movingHeadWheels"] = [];
            for (let item of this.movingHeadWheels)
                data["movingHeadWheels"].push(item.toJSON());
        }
        return data;
    }
}

export interface ILightsGroupResponse {
    name: string;
    id: number;
    createdAt: Date;
    updatedAt: Date;
    pars: Pars[];
    movingHeadRgbs: MovingHeadRgbs[];
    movingHeadWheels: MovingHeadWheelResponse[];
}

export class LightsInGroup implements ILightsInGroup {
    fixtureId!: number;
    firstChannel!: number;

    constructor(data?: ILightsInGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fixtureId = _data["fixtureId"];
            this.firstChannel = _data["firstChannel"];
        }
    }

    static fromJS(data: any): LightsInGroup {
        data = typeof data === 'object' ? data : {};
        let result = new LightsInGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fixtureId"] = this.fixtureId;
        data["firstChannel"] = this.firstChannel;
        return data;
    }
}

export interface ILightsInGroup {
    fixtureId: number;
    firstChannel: number;
}

export class LightsGroupCreateParams implements ILightsGroupCreateParams {
    name!: string;
    pars!: LightsInGroup[];
    movingHeadRgbs!: LightsInGroup[];
    movingHeadWheels!: LightsInGroup[];

    constructor(data?: ILightsGroupCreateParams) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.pars = [];
            this.movingHeadRgbs = [];
            this.movingHeadWheels = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            if (Array.isArray(_data["pars"])) {
                this.pars = [] as any;
                for (let item of _data["pars"])
                    this.pars!.push(LightsInGroup.fromJS(item));
            }
            if (Array.isArray(_data["movingHeadRgbs"])) {
                this.movingHeadRgbs = [] as any;
                for (let item of _data["movingHeadRgbs"])
                    this.movingHeadRgbs!.push(LightsInGroup.fromJS(item));
            }
            if (Array.isArray(_data["movingHeadWheels"])) {
                this.movingHeadWheels = [] as any;
                for (let item of _data["movingHeadWheels"])
                    this.movingHeadWheels!.push(LightsInGroup.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LightsGroupCreateParams {
        data = typeof data === 'object' ? data : {};
        let result = new LightsGroupCreateParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (Array.isArray(this.pars)) {
            data["pars"] = [];
            for (let item of this.pars)
                data["pars"].push(item.toJSON());
        }
        if (Array.isArray(this.movingHeadRgbs)) {
            data["movingHeadRgbs"] = [];
            for (let item of this.movingHeadRgbs)
                data["movingHeadRgbs"].push(item.toJSON());
        }
        if (Array.isArray(this.movingHeadWheels)) {
            data["movingHeadWheels"] = [];
            for (let item of this.movingHeadWheels)
                data["movingHeadWheels"].push(item.toJSON());
        }
        return data;
    }
}

export interface ILightsGroupCreateParams {
    name: string;
    pars: LightsInGroup[];
    movingHeadRgbs: LightsInGroup[];
    movingHeadWheels: LightsInGroup[];
}

export class LightsParCreateParams implements ILightsParCreateParams {
    name!: string;
    masterDimChannel!: number;
    strobeChannel!: number;
    colorRedChannel!: number;
    colorGreenChannel!: number;
    colorBlueChannel!: number;
    colorColdWhiteChannel?: number;
    colorWarmWhiteChannel?: number;
    colorAmberWhiteChannel?: number;
    colorUvChannel?: number;

    constructor(data?: ILightsParCreateParams) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.masterDimChannel = _data["masterDimChannel"];
            this.strobeChannel = _data["strobeChannel"];
            this.colorRedChannel = _data["colorRedChannel"];
            this.colorGreenChannel = _data["colorGreenChannel"];
            this.colorBlueChannel = _data["colorBlueChannel"];
            this.colorColdWhiteChannel = _data["colorColdWhiteChannel"];
            this.colorWarmWhiteChannel = _data["colorWarmWhiteChannel"];
            this.colorAmberWhiteChannel = _data["colorAmberWhiteChannel"];
            this.colorUvChannel = _data["colorUvChannel"];
        }
    }

    static fromJS(data: any): LightsParCreateParams {
        data = typeof data === 'object' ? data : {};
        let result = new LightsParCreateParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["masterDimChannel"] = this.masterDimChannel;
        data["strobeChannel"] = this.strobeChannel;
        data["colorRedChannel"] = this.colorRedChannel;
        data["colorGreenChannel"] = this.colorGreenChannel;
        data["colorBlueChannel"] = this.colorBlueChannel;
        data["colorColdWhiteChannel"] = this.colorColdWhiteChannel;
        data["colorWarmWhiteChannel"] = this.colorWarmWhiteChannel;
        data["colorAmberWhiteChannel"] = this.colorAmberWhiteChannel;
        data["colorUvChannel"] = this.colorUvChannel;
        return data;
    }
}

export interface ILightsParCreateParams {
    name: string;
    masterDimChannel: number;
    strobeChannel: number;
    colorRedChannel: number;
    colorGreenChannel: number;
    colorBlueChannel: number;
    colorColdWhiteChannel?: number;
    colorWarmWhiteChannel?: number;
    colorAmberWhiteChannel?: number;
    colorUvChannel?: number;
}

export class LightsMovingHeadRgbCreateParams implements ILightsMovingHeadRgbCreateParams {
    name!: string;
    masterDimChannel!: number;
    strobeChannel!: number;
    panChannel!: number;
    finePanChannel?: number;
    tiltChannel!: number;
    fineTiltChannel?: number;
    movingSpeedChannel?: number;
    colorRedChannel!: number;
    colorGreenChannel!: number;
    colorBlueChannel!: number;
    colorColdWhiteChannel?: number;
    colorWarmWhiteChannel?: number;
    colorAmberWhiteChannel?: number;
    colorUvChannel?: number;

    constructor(data?: ILightsMovingHeadRgbCreateParams) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.masterDimChannel = _data["masterDimChannel"];
            this.strobeChannel = _data["strobeChannel"];
            this.panChannel = _data["panChannel"];
            this.finePanChannel = _data["finePanChannel"];
            this.tiltChannel = _data["tiltChannel"];
            this.fineTiltChannel = _data["fineTiltChannel"];
            this.movingSpeedChannel = _data["movingSpeedChannel"];
            this.colorRedChannel = _data["colorRedChannel"];
            this.colorGreenChannel = _data["colorGreenChannel"];
            this.colorBlueChannel = _data["colorBlueChannel"];
            this.colorColdWhiteChannel = _data["colorColdWhiteChannel"];
            this.colorWarmWhiteChannel = _data["colorWarmWhiteChannel"];
            this.colorAmberWhiteChannel = _data["colorAmberWhiteChannel"];
            this.colorUvChannel = _data["colorUvChannel"];
        }
    }

    static fromJS(data: any): LightsMovingHeadRgbCreateParams {
        data = typeof data === 'object' ? data : {};
        let result = new LightsMovingHeadRgbCreateParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["masterDimChannel"] = this.masterDimChannel;
        data["strobeChannel"] = this.strobeChannel;
        data["panChannel"] = this.panChannel;
        data["finePanChannel"] = this.finePanChannel;
        data["tiltChannel"] = this.tiltChannel;
        data["fineTiltChannel"] = this.fineTiltChannel;
        data["movingSpeedChannel"] = this.movingSpeedChannel;
        data["colorRedChannel"] = this.colorRedChannel;
        data["colorGreenChannel"] = this.colorGreenChannel;
        data["colorBlueChannel"] = this.colorBlueChannel;
        data["colorColdWhiteChannel"] = this.colorColdWhiteChannel;
        data["colorWarmWhiteChannel"] = this.colorWarmWhiteChannel;
        data["colorAmberWhiteChannel"] = this.colorAmberWhiteChannel;
        data["colorUvChannel"] = this.colorUvChannel;
        return data;
    }
}

export interface ILightsMovingHeadRgbCreateParams {
    name: string;
    masterDimChannel: number;
    strobeChannel: number;
    panChannel: number;
    finePanChannel?: number;
    tiltChannel: number;
    fineTiltChannel?: number;
    movingSpeedChannel?: number;
    colorRedChannel: number;
    colorGreenChannel: number;
    colorBlueChannel: number;
    colorColdWhiteChannel?: number;
    colorWarmWhiteChannel?: number;
    colorAmberWhiteChannel?: number;
    colorUvChannel?: number;
}

export class LightsMovingHeadWheelCreateParams implements ILightsMovingHeadWheelCreateParams {
    name!: string;
    masterDimChannel!: number;
    strobeChannel!: number;
    panChannel!: number;
    finePanChannel?: number;
    tiltChannel!: number;
    fineTiltChannel?: number;
    movingSpeedChannel?: number;
    colorWheelChannel!: number;
    colorWheelChannelValues!: ColorWheelChannelValues[];
    goboWheelChannel!: number;
    goboWheelChannelValues!: GoboWheelChannelValues[];
    goboRotateChannel?: number;

    constructor(data?: ILightsMovingHeadWheelCreateParams) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.colorWheelChannelValues = [];
            this.goboWheelChannelValues = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.masterDimChannel = _data["masterDimChannel"];
            this.strobeChannel = _data["strobeChannel"];
            this.panChannel = _data["panChannel"];
            this.finePanChannel = _data["finePanChannel"];
            this.tiltChannel = _data["tiltChannel"];
            this.fineTiltChannel = _data["fineTiltChannel"];
            this.movingSpeedChannel = _data["movingSpeedChannel"];
            this.colorWheelChannel = _data["colorWheelChannel"];
            if (Array.isArray(_data["colorWheelChannelValues"])) {
                this.colorWheelChannelValues = [] as any;
                for (let item of _data["colorWheelChannelValues"])
                    this.colorWheelChannelValues!.push(ColorWheelChannelValues.fromJS(item));
            }
            this.goboWheelChannel = _data["goboWheelChannel"];
            if (Array.isArray(_data["goboWheelChannelValues"])) {
                this.goboWheelChannelValues = [] as any;
                for (let item of _data["goboWheelChannelValues"])
                    this.goboWheelChannelValues!.push(GoboWheelChannelValues.fromJS(item));
            }
            this.goboRotateChannel = _data["goboRotateChannel"];
        }
    }

    static fromJS(data: any): LightsMovingHeadWheelCreateParams {
        data = typeof data === 'object' ? data : {};
        let result = new LightsMovingHeadWheelCreateParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["masterDimChannel"] = this.masterDimChannel;
        data["strobeChannel"] = this.strobeChannel;
        data["panChannel"] = this.panChannel;
        data["finePanChannel"] = this.finePanChannel;
        data["tiltChannel"] = this.tiltChannel;
        data["fineTiltChannel"] = this.fineTiltChannel;
        data["movingSpeedChannel"] = this.movingSpeedChannel;
        data["colorWheelChannel"] = this.colorWheelChannel;
        if (Array.isArray(this.colorWheelChannelValues)) {
            data["colorWheelChannelValues"] = [];
            for (let item of this.colorWheelChannelValues)
                data["colorWheelChannelValues"].push(item.toJSON());
        }
        data["goboWheelChannel"] = this.goboWheelChannel;
        if (Array.isArray(this.goboWheelChannelValues)) {
            data["goboWheelChannelValues"] = [];
            for (let item of this.goboWheelChannelValues)
                data["goboWheelChannelValues"].push(item.toJSON());
        }
        data["goboRotateChannel"] = this.goboRotateChannel;
        return data;
    }
}

export interface ILightsMovingHeadWheelCreateParams {
    name: string;
    masterDimChannel: number;
    strobeChannel: number;
    panChannel: number;
    finePanChannel?: number;
    tiltChannel: number;
    fineTiltChannel?: number;
    movingSpeedChannel?: number;
    colorWheelChannel: number;
    colorWheelChannelValues: ColorWheelChannelValues[];
    goboWheelChannel: number;
    goboWheelChannelValues: GoboWheelChannelValues[];
    goboRotateChannel?: number;
}

export class RgbColorDefinition implements IRgbColorDefinition {
    redChannel?: number;
    blueChannel?: number;
    greenChannel?: number;
    coldWhiteChannel?: number;
    warmWhiteChannel?: number;
    amberChannel?: number;
    uvChannel?: number;

    [key: string]: any;

    constructor(data?: IRgbColorDefinition) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.redChannel = _data["redChannel"];
            this.blueChannel = _data["blueChannel"];
            this.greenChannel = _data["greenChannel"];
            this.coldWhiteChannel = _data["coldWhiteChannel"];
            this.warmWhiteChannel = _data["warmWhiteChannel"];
            this.amberChannel = _data["amberChannel"];
            this.uvChannel = _data["uvChannel"];
        }
    }

    static fromJS(data: any): RgbColorDefinition {
        data = typeof data === 'object' ? data : {};
        let result = new RgbColorDefinition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["redChannel"] = this.redChannel;
        data["blueChannel"] = this.blueChannel;
        data["greenChannel"] = this.greenChannel;
        data["coldWhiteChannel"] = this.coldWhiteChannel;
        data["warmWhiteChannel"] = this.warmWhiteChannel;
        data["amberChannel"] = this.amberChannel;
        data["uvChannel"] = this.uvChannel;
        return data;
    }
}

export interface IRgbColorDefinition {
    redChannel?: number;
    blueChannel?: number;
    greenChannel?: number;
    coldWhiteChannel?: number;
    warmWhiteChannel?: number;
    amberChannel?: number;
    uvChannel?: number;

    [key: string]: any;
}

export enum WheelColor {
    White = "white",
    Red = "red",
    Green = "green",
    Blue = "blue",
    Yellow = "yellow",
    Lightblue = "lightblue",
    Orange = "orange",
    Rosered = "rosered",
}

export class RgbColorSpecification implements IRgbColorSpecification {
    hex!: string;
    complementary!: RgbColor[];
    alternative!: WheelColor;
    definition!: RgbColorDefinition;

    [key: string]: any;

    constructor(data?: IRgbColorSpecification) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.complementary = [];
            this.definition = new RgbColorDefinition();
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.hex = _data["hex"];
            if (Array.isArray(_data["complementary"])) {
                this.complementary = [] as any;
                for (let item of _data["complementary"])
                    this.complementary!.push(item);
            }
            this.alternative = _data["alternative"];
            this.definition = _data["definition"] ? RgbColorDefinition.fromJS(_data["definition"]) : new RgbColorDefinition();
        }
    }

    static fromJS(data: any): RgbColorSpecification {
        data = typeof data === 'object' ? data : {};
        let result = new RgbColorSpecification();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["hex"] = this.hex;
        if (Array.isArray(this.complementary)) {
            data["complementary"] = [];
            for (let item of this.complementary)
                data["complementary"].push(item);
        }
        data["alternative"] = this.alternative;
        data["definition"] = this.definition ? this.definition.toJSON() : <any>undefined;
        return data;
    }
}

export interface IRgbColorSpecification {
    hex: string;
    complementary: RgbColor[];
    alternative: WheelColor;
    definition: RgbColorDefinition;

    [key: string]: any;
}

export class LightsColorResponse implements ILightsColorResponse {
    color!: RgbColor;
    spec!: RgbColorSpecification;

    constructor(data?: ILightsColorResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.spec = new RgbColorSpecification();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.color = _data["color"];
            this.spec = _data["spec"] ? RgbColorSpecification.fromJS(_data["spec"]) : new RgbColorSpecification();
        }
    }

    static fromJS(data: any): LightsColorResponse {
        data = typeof data === 'object' ? data : {};
        let result = new LightsColorResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["color"] = this.color;
        data["spec"] = this.spec ? this.spec.toJSON() : <any>undefined;
        return data;
    }
}

export interface ILightsColorResponse {
    color: RgbColor;
    spec: RgbColorSpecification;
}

export class GroupFixtureOverrideParams implements IGroupFixtureOverrideParams {
    dmxValues!: (number | undefined)[];

    constructor(data?: IGroupFixtureOverrideParams) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.dmxValues = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["dmxValues"])) {
                this.dmxValues = [] as any;
                for (let item of _data["dmxValues"])
                    this.dmxValues!.push(item);
            }
        }
    }

    static fromJS(data: any): GroupFixtureOverrideParams {
        data = typeof data === 'object' ? data : {};
        let result = new GroupFixtureOverrideParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dmxValues)) {
            data["dmxValues"] = [];
            for (let item of this.dmxValues)
                data["dmxValues"].push(item);
        }
        return data;
    }
}

export interface IGroupFixtureOverrideParams {
    dmxValues: (number | undefined)[];
}

export class ScreenResponse implements IScreenResponse {
    name!: string;
    id!: number;
    createdAt!: Date;
    updatedAt!: Date;

    constructor(data?: IScreenResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.id = _data["id"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ScreenResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ScreenResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["id"] = this.id;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        return data;
    }
}

export interface IScreenResponse {
    name: string;
    id: number;
    createdAt: Date;
    updatedAt: Date;
}

export class ScreenCreateParams implements IScreenCreateParams {
    name!: string;

    constructor(data?: IScreenCreateParams) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): ScreenCreateParams {
        data = typeof data === 'object' ? data : {};
        let result = new ScreenCreateParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    }
}

export interface IScreenCreateParams {
    name: string;
}

export class UserProfile implements IUserProfile {
    name!: string;
    roles!: string[];
    country!: string;
    explicit_content!: Explicit_content;
    product!: string;

    constructor(data?: IUserProfile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.roles = [];
            this.explicit_content = new Explicit_content();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(item);
            }
            this.country = _data["country"];
            this.explicit_content = _data["explicit_content"] ? Explicit_content.fromJS(_data["explicit_content"]) : new Explicit_content();
            this.product = _data["product"];
        }
    }

    static fromJS(data: any): UserProfile {
        data = typeof data === 'object' ? data : {};
        let result = new UserProfile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        data["country"] = this.country;
        data["explicit_content"] = this.explicit_content ? this.explicit_content.toJSON() : <any>undefined;
        data["product"] = this.product;
        return data;
    }
}

export interface IUserProfile {
    name: string;
    roles: string[];
    country: string;
    explicit_content: Explicit_content;
    product: string;
}

export class SpotifyUserResponse implements ISpotifyUserResponse {
    id!: number;
    createdAt!: Date;
    updatedAt!: Date;
    name!: string;
    spotifyId!: string;
    active!: boolean;

    constructor(data?: ISpotifyUserResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.spotifyId = _data["spotifyId"];
            this.active = _data["active"];
        }
    }

    static fromJS(data: any): SpotifyUserResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SpotifyUserResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        data["name"] = this.name;
        data["spotifyId"] = this.spotifyId;
        data["active"] = this.active;
        return data;
    }
}

export interface ISpotifyUserResponse {
    id: number;
    createdAt: Date;
    updatedAt: Date;
    name: string;
    spotifyId: string;
    active: boolean;
}

export class OIDCParameters implements IOIDCParameters {
    state?: string;
    session_state?: string;
    code?: string;

    constructor(data?: IOIDCParameters) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.state = _data["state"];
            this.session_state = _data["session_state"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): OIDCParameters {
        data = typeof data === 'object' ? data : {};
        let result = new OIDCParameters();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["state"] = this.state;
        data["session_state"] = this.session_state;
        data["code"] = this.code;
        return data;
    }
}

export interface IOIDCParameters {
    state?: string;
    session_state?: string;
    code?: string;
}

export class Body implements IBody {
    seconds!: number;

    [key: string]: any;

    constructor(data?: IBody) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.seconds = _data["seconds"];
        }
    }

    static fromJS(data: any): Body {
        data = typeof data === 'object' ? data : {};
        let result = new Body();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["seconds"] = this.seconds;
        return data;
    }
}

export interface IBody {
    seconds: number;

    [key: string]: any;
}

export class Body2 implements IBody2 {
    name!: string;

    [key: string]: any;

    constructor(data?: IBody2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Body2 {
        data = typeof data === 'object' ? data : {};
        let result = new Body2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        return data;
    }
}

export interface IBody2 {
    name: string;

    [key: string]: any;
}

export class Body3 implements IBody3 {
    name!: string;

    [key: string]: any;

    constructor(data?: IBody3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Body3 {
        data = typeof data === 'object' ? data : {};
        let result = new Body3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        return data;
    }
}

export interface IBody3 {
    name: string;

    [key: string]: any;
}

export class Body4 implements IBody4 {
    name!: string;

    [key: string]: any;

    constructor(data?: IBody4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Body4 {
        data = typeof data === 'object' ? data : {};
        let result = new Body4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        return data;
    }
}

export interface IBody4 {
    name: string;

    [key: string]: any;
}

export class Anonymous implements IAnonymous {

    [key: string]: any;

    constructor(data?: IAnonymous) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): Anonymous {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface IAnonymous {

    [key: string]: any;
}

export class Anonymous2 implements IAnonymous2 {
    message!: string;

    [key: string]: any;

    constructor(data?: IAnonymous2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous2 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous2 {
    message: string;

    [key: string]: any;
}

export enum Anonymous3 {
    Centurion_not_enabled = "Centurion not enabled",
    Centurion_not_yet_fully_initialized__Please_wait_and_try_again_later = "Centurion not yet fully initialized. Please wait and try again later",
    Empty = "",
}

export enum Anonymous4 {
    Centurion_not_enabled = "Centurion not enabled",
    Empty = "",
}

export enum Anonymous5 {
    Centurion_not_enabled = "Centurion not enabled",
    Empty = "",
}

export class Anonymous6 implements IAnonymous6 {

    [key: string]: any;

    constructor(data?: IAnonymous6) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): Anonymous6 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous6();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface IAnonymous6 {

    [key: string]: any;
}

export class Type implements IType {

    [key: string]: any;

    constructor(data?: IType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): Type {
        data = typeof data === 'object' ? data : {};
        let result = new Type();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface IType {

    [key: string]: any;
}

export class Messages implements IMessages {
    message!: string;
    style!: string;

    [key: string]: any;

    constructor(data?: IMessages) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
            this.style = _data["style"];
        }
    }

    static fromJS(data: any): Messages {
        data = typeof data === 'object' ? data : {};
        let result = new Messages();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        data["style"] = this.style;
        return data;
    }
}

export interface IMessages {
    message: string;
    style: string;

    [key: string]: any;
}

export enum LightsWheelChannelValue_ColorWheelColors_Channel {
    ColorWheelChannel = "colorWheelChannel",
    GoboWheelChannel = "goboWheelChannel",
    GoboRotateChannel = "goboRotateChannel",
    ColorWheelChannelValues = "colorWheelChannelValues",
    GoboWheelChannelValues = "goboWheelChannelValues",
    Blackout = "blackout",
    SetCurrentValues = "setCurrentValues",
    ChannelValues = "channelValues",
    ToDmx = "toDmx",
    Movement = "movement",
    Name = "name",
    MasterDimChannel = "masterDimChannel",
    StrobeChannel = "strobeChannel",
    ResetChannelAndValue = "resetChannelAndValue",
    ValuesUpdatedAt = "valuesUpdatedAt",
    AfterLoad = "afterLoad",
    Reset = "reset",
    EnableStrobe = "enableStrobe",
    DisableStrobe = "disableStrobe",
    SetOverrideDmx = "setOverrideDmx",
    ClearOverrideDmx = "clearOverrideDmx",
    Id = "id",
    CreatedAt = "createdAt",
    UpdatedAt = "updatedAt",
    HasId = "hasId",
    Save = "save",
    Remove = "remove",
    SoftRemove = "softRemove",
    Recover = "recover",
    Reload = "reload",
}

export enum LightsWheelChannelValue_string_Channel {
    ColorWheelChannel = "colorWheelChannel",
    GoboWheelChannel = "goboWheelChannel",
    GoboRotateChannel = "goboRotateChannel",
    ColorWheelChannelValues = "colorWheelChannelValues",
    GoboWheelChannelValues = "goboWheelChannelValues",
    Blackout = "blackout",
    SetCurrentValues = "setCurrentValues",
    ChannelValues = "channelValues",
    ToDmx = "toDmx",
    Movement = "movement",
    Name = "name",
    MasterDimChannel = "masterDimChannel",
    StrobeChannel = "strobeChannel",
    ResetChannelAndValue = "resetChannelAndValue",
    ValuesUpdatedAt = "valuesUpdatedAt",
    AfterLoad = "afterLoad",
    Reset = "reset",
    EnableStrobe = "enableStrobe",
    DisableStrobe = "disableStrobe",
    SetOverrideDmx = "setOverrideDmx",
    ClearOverrideDmx = "clearOverrideDmx",
    Id = "id",
    CreatedAt = "createdAt",
    UpdatedAt = "updatedAt",
    HasId = "hasId",
    Save = "save",
    Remove = "remove",
    SoftRemove = "softRemove",
    Recover = "recover",
    Reload = "reload",
}

export class CurrentValues extends Colors implements ICurrentValues {
    panChannel!: number;
    finePanChannel?: number | undefined;
    tiltChannel!: number;
    fineTiltChannel?: number | undefined;
    movingSpeedChannel?: number | undefined;
    masterDimChannel!: number;
    strobeChannel!: number;

    [key: string]: any;

    constructor(data?: ICurrentValues) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.panChannel = _data["panChannel"];
            this.finePanChannel = _data["finePanChannel"];
            this.tiltChannel = _data["tiltChannel"];
            this.fineTiltChannel = _data["fineTiltChannel"];
            this.movingSpeedChannel = _data["movingSpeedChannel"];
            this.masterDimChannel = _data["masterDimChannel"];
            this.strobeChannel = _data["strobeChannel"];
        }
    }

    static fromJS(data: any): CurrentValues {
        data = typeof data === 'object' ? data : {};
        let result = new CurrentValues();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["panChannel"] = this.panChannel;
        data["finePanChannel"] = this.finePanChannel;
        data["tiltChannel"] = this.tiltChannel;
        data["fineTiltChannel"] = this.fineTiltChannel;
        data["movingSpeedChannel"] = this.movingSpeedChannel;
        data["masterDimChannel"] = this.masterDimChannel;
        data["strobeChannel"] = this.strobeChannel;
        super.toJSON(data);
        return data;
    }
}

export interface ICurrentValues extends IColors {
    panChannel: number;
    finePanChannel?: number | undefined;
    tiltChannel: number;
    fineTiltChannel?: number | undefined;
    movingSpeedChannel?: number | undefined;
    masterDimChannel: number;
    strobeChannel: number;

    [key: string]: any;
}

export enum BeatFadeOutCreateParamsType {
    BeatFadeOut = "BeatFadeOut",
}

export enum SearchLightCreateParamsType {
    SearchLight = "SearchLight",
}

export enum SingleFloodCreateParamsType {
    SingleFlood = "SingleFlood",
}

export enum SparkleCreateParamsType {
    Sparkle = "Sparkle",
}

export enum StaticColorCreateParamsType {
    StaticColor = "StaticColor",
}

export enum StrobeCreateParamsType {
    Strobe = "Strobe",
}

export enum WaveCreateParamsType {
    Wave = "Wave",
}

export class Anonymous7 implements IAnonymous7 {
    value?: any;
    message!: string;

    [key: string]: any;

    constructor(data?: IAnonymous7) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous7 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous7();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value;
        data["message"] = this.message;
        return data;
    }
}

export interface IAnonymous7 {
    value?: any;
    message: string;

    [key: string]: any;
}

export class Pars extends LightsFixtureResponse implements IPars {
    redChannel!: number;
    blueChannel!: number;
    greenChannel!: number;
    coldWhiteChannel?: number | undefined;
    warmWhiteChannel?: number | undefined;
    amberChannel?: number | undefined;
    uvChannel?: number | undefined;

    [key: string]: any;

    constructor(data?: IPars) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.redChannel = _data["redChannel"];
            this.blueChannel = _data["blueChannel"];
            this.greenChannel = _data["greenChannel"];
            this.coldWhiteChannel = _data["coldWhiteChannel"];
            this.warmWhiteChannel = _data["warmWhiteChannel"];
            this.amberChannel = _data["amberChannel"];
            this.uvChannel = _data["uvChannel"];
        }
    }

    static fromJS(data: any): Pars {
        data = typeof data === 'object' ? data : {};
        let result = new Pars();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["redChannel"] = this.redChannel;
        data["blueChannel"] = this.blueChannel;
        data["greenChannel"] = this.greenChannel;
        data["coldWhiteChannel"] = this.coldWhiteChannel;
        data["warmWhiteChannel"] = this.warmWhiteChannel;
        data["amberChannel"] = this.amberChannel;
        data["uvChannel"] = this.uvChannel;
        super.toJSON(data);
        return data;
    }
}

export interface IPars extends ILightsFixtureResponse {
    redChannel: number;
    blueChannel: number;
    greenChannel: number;
    coldWhiteChannel?: number | undefined;
    warmWhiteChannel?: number | undefined;
    amberChannel?: number | undefined;
    uvChannel?: number | undefined;

    [key: string]: any;
}

export class MovingHeadRgbs extends MovingHeadResponse implements IMovingHeadRgbs {
    redChannel!: number;
    blueChannel!: number;
    greenChannel!: number;
    coldWhiteChannel?: number | undefined;
    warmWhiteChannel?: number | undefined;
    amberChannel?: number | undefined;
    uvChannel?: number | undefined;

    [key: string]: any;

    constructor(data?: IMovingHeadRgbs) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.redChannel = _data["redChannel"];
            this.blueChannel = _data["blueChannel"];
            this.greenChannel = _data["greenChannel"];
            this.coldWhiteChannel = _data["coldWhiteChannel"];
            this.warmWhiteChannel = _data["warmWhiteChannel"];
            this.amberChannel = _data["amberChannel"];
            this.uvChannel = _data["uvChannel"];
        }
    }

    static fromJS(data: any): MovingHeadRgbs {
        data = typeof data === 'object' ? data : {};
        let result = new MovingHeadRgbs();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["redChannel"] = this.redChannel;
        data["blueChannel"] = this.blueChannel;
        data["greenChannel"] = this.greenChannel;
        data["coldWhiteChannel"] = this.coldWhiteChannel;
        data["warmWhiteChannel"] = this.warmWhiteChannel;
        data["amberChannel"] = this.amberChannel;
        data["uvChannel"] = this.uvChannel;
        super.toJSON(data);
        return data;
    }
}

export interface IMovingHeadRgbs extends IMovingHeadResponse {
    redChannel: number;
    blueChannel: number;
    greenChannel: number;
    coldWhiteChannel?: number | undefined;
    warmWhiteChannel?: number | undefined;
    amberChannel?: number | undefined;
    uvChannel?: number | undefined;

    [key: string]: any;
}

export class ColorWheelChannelValues implements IColorWheelChannelValues {
    value!: number;
    name!: string;

    [key: string]: any;

    constructor(data?: IColorWheelChannelValues) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): ColorWheelChannelValues {
        data = typeof data === 'object' ? data : {};
        let result = new ColorWheelChannelValues();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value;
        data["name"] = this.name;
        return data;
    }
}

export interface IColorWheelChannelValues {
    value: number;
    name: string;

    [key: string]: any;
}

export class GoboWheelChannelValues implements IGoboWheelChannelValues {
    value!: number;
    name!: string;

    [key: string]: any;

    constructor(data?: IGoboWheelChannelValues) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): GoboWheelChannelValues {
        data = typeof data === 'object' ? data : {};
        let result = new GoboWheelChannelValues();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value;
        data["name"] = this.name;
        return data;
    }
}

export interface IGoboWheelChannelValues {
    value: number;
    name: string;

    [key: string]: any;
}

export class Explicit_content implements IExplicit_content {
    filter_locked!: boolean;
    filter_enabled!: boolean;

    [key: string]: any;

    constructor(data?: IExplicit_content) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.filter_locked = _data["filter_locked"];
            this.filter_enabled = _data["filter_enabled"];
        }
    }

    static fromJS(data: any): Explicit_content {
        data = typeof data === 'object' ? data : {};
        let result = new Explicit_content();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["filter_locked"] = this.filter_locked;
        data["filter_enabled"] = this.filter_enabled;
        return data;
    }
}

export interface IExplicit_content {
    filter_locked: boolean;
    filter_enabled: boolean;

    [key: string]: any;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}